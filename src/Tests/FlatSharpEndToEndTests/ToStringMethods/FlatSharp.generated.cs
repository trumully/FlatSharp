//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the FlatSharp FBS to C# compiler (source hash: 7.6.0.AiHTS3aEZxDD66gkdkKTdZUtKSkDXH1IfZXk0oYFLdI=)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using FlatSharp;
using FlatSharp.Attributes;
using FlatSharp.Internal;
#pragma warning disable 0618
#nullable enable annotations
namespace FlatSharp.Compiler.Generated
{
    internal static class CloneHelpers_c7b9e5a6e14d44a9bf6da3d1c466ecc2
    {
        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::FlatSharpEndToEndTests.ToStringMethods.Color Clone(global::FlatSharpEndToEndTests.ToStringMethods.Color item)
        {
            return item;
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.SByte Clone(global::System.SByte item)
        {
            return item;
        }


        public static global::FlatSharpEndToEndTests.ToStringMethods.Equipped Clone(global::FlatSharpEndToEndTests.ToStringMethods.Equipped item)
        {

            byte discriminator = item.Discriminator;
            switch (discriminator)
            {

                case 1:
                    return new global::FlatSharpEndToEndTests.ToStringMethods.Equipped(global::FlatSharp.Compiler.Generated.CloneHelpers_c7b9e5a6e14d44a9bf6da3d1c466ecc2.Clone(item.Item1));


                case 2:
                    return new global::FlatSharpEndToEndTests.ToStringMethods.Equipped(global::FlatSharp.Compiler.Generated.CloneHelpers_c7b9e5a6e14d44a9bf6da3d1c466ecc2.Clone(item.Item2));

                default:
                    global::FlatSharp.Internal.FSThrow.InvalidOperation_InvalidUnionDiscriminator<global::FlatSharpEndToEndTests.ToStringMethods.Equipped>(discriminator);
                    return default(global::FlatSharpEndToEndTests.ToStringMethods.Equipped);
            }

        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::FlatSharpEndToEndTests.ToStringMethods.Weapon? Clone(global::FlatSharpEndToEndTests.ToStringMethods.Weapon? item)
        {
            return item is null ? null : new FlatSharpEndToEndTests.ToStringMethods.Weapon(item);
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.String? Clone(global::System.String? item)
        {
            return item;
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Byte Clone(global::System.Byte item)
        {
            return item;
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Int16 Clone(global::System.Int16 item)
        {
            return item;
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::FlatSharpEndToEndTests.ToStringMethods.Monster? Clone(global::FlatSharpEndToEndTests.ToStringMethods.Monster? item)
        {
            return item is null ? null : new FlatSharpEndToEndTests.ToStringMethods.Monster(item);
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Nullable<FlatSharpEndToEndTests.ToStringMethods.Vec3> Clone(global::System.Nullable<FlatSharpEndToEndTests.ToStringMethods.Vec3> item)
        {

            if (item.HasValue)
            {
                return global::FlatSharp.Compiler.Generated.CloneHelpers_c7b9e5a6e14d44a9bf6da3d1c466ecc2.Clone(item.Value);
            }

            return null;

        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Boolean Clone(global::System.Boolean item)
        {
            return item;
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Nullable<System.Memory<System.Byte>> Clone(global::System.Nullable<System.Memory<System.Byte>> item)
        {

            if (item.HasValue)
            {
                return global::FlatSharp.Compiler.Generated.CloneHelpers_c7b9e5a6e14d44a9bf6da3d1c466ecc2.Clone(item.Value);
            }

            return null;

        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Collections.Generic.IList<FlatSharpEndToEndTests.ToStringMethods.Weapon>? Clone(global::System.Collections.Generic.IList<FlatSharpEndToEndTests.ToStringMethods.Weapon>? item)
        {
            return VectorCloneHelpers.Clone<FlatSharpEndToEndTests.ToStringMethods.Weapon>(item, global::FlatSharp.Compiler.Generated.CloneHelpers_c7b9e5a6e14d44a9bf6da3d1c466ecc2.Clone);
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Nullable<FlatSharpEndToEndTests.ToStringMethods.Equipped> Clone(global::System.Nullable<FlatSharpEndToEndTests.ToStringMethods.Equipped> item)
        {

            if (item.HasValue)
            {
                return global::FlatSharp.Compiler.Generated.CloneHelpers_c7b9e5a6e14d44a9bf6da3d1c466ecc2.Clone(item.Value);
            }

            return null;

        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Collections.Generic.IList<FlatSharpEndToEndTests.ToStringMethods.Vec3>? Clone(global::System.Collections.Generic.IList<FlatSharpEndToEndTests.ToStringMethods.Vec3>? item)
        {
            return VectorCloneHelpers.Clone<FlatSharpEndToEndTests.ToStringMethods.Vec3>(item);
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Double Clone(global::System.Double item)
        {
            return item;
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::FlatSharpEndToEndTests.ToStringMethods.Vec3 Clone(global::FlatSharpEndToEndTests.ToStringMethods.Vec3 item)
        {
            return item;
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Memory<System.Byte> Clone(global::System.Memory<System.Byte> item)
        {
            return item.ToArray().AsMemory();
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Single Clone(global::System.Single item)
        {
            return item;
        }

    }

}


namespace FlatSharp.Compiler.Generated.N9ECB557C4088DE7F9A350F3B558CCA88B930AF416282C303F434971E5DB5E0B3
{
    // Make sure we can reference the namespace of the type we are using.
    // Ensures that extension methods, etc are available.
    using FlatSharpEndToEndTests.ToStringMethods;

    internal static class Helpers
    {

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static int GetMaxSize(global::FlatSharpEndToEndTests.ToStringMethods.Color value)
        {
            return global::FlatSharp.Compiler.Generated.NF791D2E6738D8D71C1ED7ED9BDD6F7BD5F9764E8D74B3B291F9458C27ED6DFDB.Helpers.GetMaxSize((global::System.SByte)value);
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static void Serialize<TSpanWriter>(
            TSpanWriter spanWriter,
            Span<byte> span,
            global::FlatSharpEndToEndTests.ToStringMethods.Color value,
            int offset

            ) where TSpanWriter : ISpanWriter
        {


            global::FlatSharp.Internal.FlatSharpInternal.AssertSizeOf<global::FlatSharpEndToEndTests.ToStringMethods.Color>(sizeof(global::System.SByte));
            global::FlatSharp.Compiler.Generated.NF791D2E6738D8D71C1ED7ED9BDD6F7BD5F9764E8D74B3B291F9458C27ED6DFDB.Helpers.Serialize(spanWriter, span, (global::System.SByte)value, offset);

        }



        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::FlatSharpEndToEndTests.ToStringMethods.Color Parse<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {



            global::FlatSharp.Internal.FlatSharpInternal.AssertSizeOf<global::FlatSharpEndToEndTests.ToStringMethods.Color>(sizeof(global::System.SByte));
            return (FlatSharpEndToEndTests.ToStringMethods.Color)global::FlatSharp.Compiler.Generated.NF791D2E6738D8D71C1ED7ED9BDD6F7BD5F9764E8D74B3B291F9458C27ED6DFDB.Helpers.Parse(buffer, offset, remainingDepth);
        }


    }
}




namespace FlatSharp.Compiler.Generated.NF791D2E6738D8D71C1ED7ED9BDD6F7BD5F9764E8D74B3B291F9458C27ED6DFDB
{
    // Make sure we can reference the namespace of the type we are using.
    // Ensures that extension methods, etc are available.
    using System;

    internal static class Helpers
    {

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static int GetMaxSize(global::System.SByte value)
        {
            return 1;
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static void Serialize<TSpanWriter>(
            TSpanWriter spanWriter,
            Span<byte> span,
            global::System.SByte value,
            int offset

            ) where TSpanWriter : ISpanWriter
        {
            spanWriter.WriteSByte(span, value, offset);
        }



        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static sbyte Parse<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {

            return buffer.ReadSByte(offset);
        }


    }
}




namespace FlatSharp.Compiler.Generated.NAAE483ADA41F1B15A6AF51A1A02EC342D327CE9F1FC93B8D548C995BE5118168
{
    // Make sure we can reference the namespace of the type we are using.
    // Ensures that extension methods, etc are available.
    using FlatSharpEndToEndTests.ToStringMethods;

    internal static class Helpers
    {


        internal static int GetMaxSize(global::FlatSharpEndToEndTests.ToStringMethods.Equipped value)
        {

            byte discriminator = value.Discriminator;
            switch (discriminator)
            {

                case 1:
                    return 7 + global::FlatSharp.Compiler.Generated.NBE8605AB3AB3723C9078C39734BE0AB28ECA11EE3E0C92A5A92FCC8AEC6F3900.Helpers.GetMaxSize(value.Item1);

                case 2:
                    return 7 + global::FlatSharp.Compiler.Generated.N713267F71061CB50DD0B6E0459A8B28F01DB10694EEF7B2C6253EFEEF1AAB66E.Helpers.GetMaxSize(value.Item2);
                default:
                    global::FlatSharp.Internal.FSThrow.InvalidOperation_InvalidUnionDiscriminator<global::FlatSharpEndToEndTests.ToStringMethods.Equipped>(discriminator);
                    return 0;
            }

        }



        internal static void Serialize<TSpanWriter>(
            TSpanWriter spanWriter,
            Span<byte> span,
            global::FlatSharpEndToEndTests.ToStringMethods.Equipped value,
            ref (int offset0, int offset1) offset
            , SerializationContext context
            , TableFieldContext fieldContext) where TSpanWriter : ISpanWriter
        {

            byte discriminatorValue = value.Discriminator;
            spanWriter.WriteByte(
                span,
                discriminatorValue,
                offset.offset0);

            switch (discriminatorValue)
            {

                case 1:
                    {
                        var writeOffset = offset.offset1;
                        global::FlatSharp.Compiler.Generated.NBE8605AB3AB3723C9078C39734BE0AB28ECA11EE3E0C92A5A92FCC8AEC6F3900.Helpers.Serialize(spanWriter, span, value.Item1, writeOffset, context);
                    }
                    break;

                case 2:
                    {
                        var writeOffset = offset.offset1;
                        global::FlatSharp.Compiler.Generated.N713267F71061CB50DD0B6E0459A8B28F01DB10694EEF7B2C6253EFEEF1AAB66E.Helpers.Serialize(spanWriter, span, value.Item2, writeOffset, context, fieldContext);
                    }
                    break;
                default:
                    global::FlatSharp.Internal.FSThrow.InvalidOperation_InvalidUnionDiscriminator<global::FlatSharpEndToEndTests.ToStringMethods.Equipped>(discriminatorValue);
                    break;
            }
        }




        internal static global::FlatSharpEndToEndTests.ToStringMethods.Equipped Parse_Lazy<TInputBuffer>(
            TInputBuffer buffer,
            ref (int offset0, int offset1) offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {


            byte discriminator = buffer.ReadByte(offset.offset0);
            int offsetLocation = offset.offset1;

            switch (discriminator)
            {

                case 1:

                    return new global::FlatSharpEndToEndTests.ToStringMethods.Equipped(global::FlatSharp.Compiler.Generated.NBE8605AB3AB3723C9078C39734BE0AB28ECA11EE3E0C92A5A92FCC8AEC6F3900.Helpers.Parse_Lazy(buffer, offsetLocation, remainingDepth));


                case 2:

                    return new global::FlatSharpEndToEndTests.ToStringMethods.Equipped(global::FlatSharp.Compiler.Generated.N713267F71061CB50DD0B6E0459A8B28F01DB10694EEF7B2C6253EFEEF1AAB66E.Helpers.Parse(buffer, offsetLocation, remainingDepth));

                default:
                    global::FlatSharp.Internal.FSThrow.InvalidOperation_InvalidUnionDiscriminator<global::FlatSharpEndToEndTests.ToStringMethods.Equipped>(discriminator);
                    return default(global::FlatSharpEndToEndTests.ToStringMethods.Equipped);
            }

        }



        internal static global::FlatSharpEndToEndTests.ToStringMethods.Equipped Parse_Progressive<TInputBuffer>(
            TInputBuffer buffer,
            ref (int offset0, int offset1) offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {


            byte discriminator = buffer.ReadByte(offset.offset0);
            int offsetLocation = offset.offset1;

            switch (discriminator)
            {

                case 1:

                    return new global::FlatSharpEndToEndTests.ToStringMethods.Equipped(global::FlatSharp.Compiler.Generated.NBE8605AB3AB3723C9078C39734BE0AB28ECA11EE3E0C92A5A92FCC8AEC6F3900.Helpers.Parse_Progressive(buffer, offsetLocation, remainingDepth));


                case 2:

                    return new global::FlatSharpEndToEndTests.ToStringMethods.Equipped(global::FlatSharp.Compiler.Generated.N713267F71061CB50DD0B6E0459A8B28F01DB10694EEF7B2C6253EFEEF1AAB66E.Helpers.Parse(buffer, offsetLocation, remainingDepth));

                default:
                    global::FlatSharp.Internal.FSThrow.InvalidOperation_InvalidUnionDiscriminator<global::FlatSharpEndToEndTests.ToStringMethods.Equipped>(discriminator);
                    return default(global::FlatSharpEndToEndTests.ToStringMethods.Equipped);
            }

        }



        internal static global::FlatSharpEndToEndTests.ToStringMethods.Equipped Parse_Greedy<TInputBuffer>(
            TInputBuffer buffer,
            ref (int offset0, int offset1) offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {


            byte discriminator = buffer.ReadByte(offset.offset0);
            int offsetLocation = offset.offset1;

            switch (discriminator)
            {

                case 1:

                    return new global::FlatSharpEndToEndTests.ToStringMethods.Equipped(global::FlatSharp.Compiler.Generated.NBE8605AB3AB3723C9078C39734BE0AB28ECA11EE3E0C92A5A92FCC8AEC6F3900.Helpers.Parse_Greedy(buffer, offsetLocation, remainingDepth));


                case 2:

                    return new global::FlatSharpEndToEndTests.ToStringMethods.Equipped(global::FlatSharp.Compiler.Generated.N713267F71061CB50DD0B6E0459A8B28F01DB10694EEF7B2C6253EFEEF1AAB66E.Helpers.Parse(buffer, offsetLocation, remainingDepth));

                default:
                    global::FlatSharp.Internal.FSThrow.InvalidOperation_InvalidUnionDiscriminator<global::FlatSharpEndToEndTests.ToStringMethods.Equipped>(discriminator);
                    return default(global::FlatSharpEndToEndTests.ToStringMethods.Equipped);
            }

        }



        internal static global::FlatSharpEndToEndTests.ToStringMethods.Equipped Parse_GreedyMutable<TInputBuffer>(
            TInputBuffer buffer,
            ref (int offset0, int offset1) offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {


            byte discriminator = buffer.ReadByte(offset.offset0);
            int offsetLocation = offset.offset1;

            switch (discriminator)
            {

                case 1:

                    return new global::FlatSharpEndToEndTests.ToStringMethods.Equipped(global::FlatSharp.Compiler.Generated.NBE8605AB3AB3723C9078C39734BE0AB28ECA11EE3E0C92A5A92FCC8AEC6F3900.Helpers.Parse_GreedyMutable(buffer, offsetLocation, remainingDepth));


                case 2:

                    return new global::FlatSharpEndToEndTests.ToStringMethods.Equipped(global::FlatSharp.Compiler.Generated.N713267F71061CB50DD0B6E0459A8B28F01DB10694EEF7B2C6253EFEEF1AAB66E.Helpers.Parse(buffer, offsetLocation, remainingDepth));

                default:
                    global::FlatSharp.Internal.FSThrow.InvalidOperation_InvalidUnionDiscriminator<global::FlatSharpEndToEndTests.ToStringMethods.Equipped>(discriminator);
                    return default(global::FlatSharpEndToEndTests.ToStringMethods.Equipped);
            }

        }


    }
}




namespace FlatSharp.Compiler.Generated.NBE8605AB3AB3723C9078C39734BE0AB28ECA11EE3E0C92A5A92FCC8AEC6F3900
{
    // Make sure we can reference the namespace of the type we are using.
    // Ensures that extension methods, etc are available.
    using FlatSharpEndToEndTests.ToStringMethods;

    internal static class Helpers
    {


        internal static int GetMaxSize(global::FlatSharpEndToEndTests.ToStringMethods.Weapon value)
        {

            int runningSum = 17 + 9;
            var index0Value = value.Name;

            if (!(index0Value is null))
            {
                runningSum += global::FlatSharp.Compiler.Generated.N713267F71061CB50DD0B6E0459A8B28F01DB10694EEF7B2C6253EFEEF1AAB66E.Helpers.GetMaxSize(index0Value);
            }
            return runningSum;

        }



        internal static void Serialize<TSpanWriter>(
            TSpanWriter spanWriter,
            Span<byte> span,
            global::FlatSharpEndToEndTests.ToStringMethods.Weapon value,
            int offset
            , SerializationContext context
            ) where TSpanWriter : ISpanWriter
        {

            int tableStart = context.AllocateSpace(14, sizeof(int));
            spanWriter.WriteUOffset(span, offset, tableStart);
            int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

            int vtableLength = 4;
            Span<byte> vtable = stackalloc byte[8];

            var index0Value = value.Name;
            var index1Value = value.Damage;

            var index0Offset = tableStart;
            if (!(index0Value is null))
            {


                currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                index0Offset = currentOffset;
                currentOffset += 4;



                if (6 > vtableLength)
                {
                    vtableLength = 6;
                }
            }

            spanWriter.WriteUShort(vtable, (ushort)(index0Offset - tableStart), 4);

            var index1Offset = tableStart;
            if (index1Value != default(System.Int16))
            {


                currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 2);
                index1Offset = currentOffset;
                currentOffset += 2;


                global::FlatSharp.Compiler.Generated.N9CBCE75A2BC26BBA2ED1E6F2E5F55E58F4574F2859145403829FFA68EF023193.Helpers.Serialize(spanWriter, span, index1Value, index1Offset);

                vtableLength = 8;
            }

            spanWriter.WriteUShort(vtable, (ushort)(index1Offset - tableStart), 6);
            int tableLength = currentOffset - tableStart;
            context.Offset -= 14 - tableLength;
            spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0);
            spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort));
            int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
            spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart);

            if (index0Offset != tableStart)
            {


                global::FlatSharp.Compiler.Generated.N713267F71061CB50DD0B6E0459A8B28F01DB10694EEF7B2C6253EFEEF1AAB66E.Helpers.Serialize(spanWriter, span, index0Value!, index0Offset, context, tableMetadata_a1d1af80de2645b79a2b54a72414ce7d.Name);

            }

        }



        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.NBE8605AB3AB3723C9078C39734BE0AB28ECA11EE3E0C92A5A92FCC8AEC6F3900.Helpers.tableReader_ce4756c340f64635850a581f5b3051fc_Lazy<TInputBuffer> Parse_Lazy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {

            return tableReader_ce4756c340f64635850a581f5b3051fc_Lazy<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
        }

        [System.Diagnostics.DebuggerDisplay("Lazy Weapon")]
        internal sealed class tableReader_ce4756c340f64635850a581f5b3051fc_Lazy<TInputBuffer>
            : global::FlatSharpEndToEndTests.ToStringMethods.Weapon
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.Lazy);



            private bool __isRoot;
            private TInputBuffer __buffer;
            private int __offset;
            private short __remainingDepth;
            private VTable4 __vtable;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_ce4756c340f64635850a581f5b3051fc_Lazy<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {

                tableReader_ce4756c340f64635850a581f5b3051fc_Lazy<TInputBuffer>? item = new tableReader_ce4756c340f64635850a581f5b3051fc_Lazy<TInputBuffer>();
                item.Initialize(buffer, offset, remainingDepth);
                return item;

            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_ce4756c340f64635850a581f5b3051fc_Lazy() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                this.__buffer = buffer;
                this.__offset = offset;
                this.__remainingDepth = remainingDepth;
                VTable4.Create<TInputBuffer>(buffer, offset, out this.__vtable);
                base.OnFlatSharpDeserialized(__CtorContext);
            }


            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(FlatSharpEndToEndTests.ToStringMethods.Weapon);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => this.__buffer;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => true;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public override System.String? Name
#else
            public override System.String? Name
#endif
            {
                get
                {
                    return ReadIndex0Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                }

                set
                {
                    global::FlatSharp.Internal.FSThrow.NotMutable();
                }
            }

#if NET7_0_OR_GREATER
            public override System.Int16 Damage
#else
            public override System.Int16 Damage
#endif
            {
                get
                {
                    return ReadIndex1Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                }

                set
                {
                    global::FlatSharp.Internal.FSThrow.NotMutable();
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.String? ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {


                int absoluteLocation;
                {
                    int relativeOffset = vtable.OffsetOf(buffer, 0);
                    if (relativeOffset == 0)
                    {
                        return null;
                    }

                    absoluteLocation = offset + relativeOffset;
                }

                return global::FlatSharp.Compiler.Generated.N713267F71061CB50DD0B6E0459A8B28F01DB10694EEF7B2C6253EFEEF1AAB66E.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Int16 ReadIndex1Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {


                int absoluteLocation;
                {
                    int relativeOffset = vtable.OffsetOf(buffer, 1);
                    if (relativeOffset == 0)
                    {
                        return default(System.Int16);
                    }

                    absoluteLocation = offset + relativeOffset;
                }

                return global::FlatSharp.Compiler.Generated.N9CBCE75A2BC26BBA2ED1E6F2E5F55E58F4574F2859145403829FFA68EF023193.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
            }
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.NBE8605AB3AB3723C9078C39734BE0AB28ECA11EE3E0C92A5A92FCC8AEC6F3900.Helpers.tableReader_ce4756c340f64635850a581f5b3051fc_Progressive<TInputBuffer> Parse_Progressive<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {

            return tableReader_ce4756c340f64635850a581f5b3051fc_Progressive<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
        }

        [System.Diagnostics.DebuggerDisplay("Progressive Weapon")]
        internal sealed class tableReader_ce4756c340f64635850a581f5b3051fc_Progressive<TInputBuffer>
            : global::FlatSharpEndToEndTests.ToStringMethods.Weapon
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.Progressive);



            private bool __isRoot;
            private TInputBuffer __buffer;
            private int __offset;
            private short __remainingDepth;
            private VTable4 __vtable;
            private byte __mask0;
            private System.String? __index0Value;
            private System.Int16 __index1Value;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_ce4756c340f64635850a581f5b3051fc_Progressive<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {

                tableReader_ce4756c340f64635850a581f5b3051fc_Progressive<TInputBuffer>? item = new tableReader_ce4756c340f64635850a581f5b3051fc_Progressive<TInputBuffer>();
                item.Initialize(buffer, offset, remainingDepth);
                return item;

            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_ce4756c340f64635850a581f5b3051fc_Progressive() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                this.__buffer = buffer;
                this.__offset = offset;
                this.__remainingDepth = remainingDepth;
                VTable4.Create<TInputBuffer>(buffer, offset, out this.__vtable);
                base.OnFlatSharpDeserialized(__CtorContext);
            }


            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(FlatSharpEndToEndTests.ToStringMethods.Weapon);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => this.__buffer;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => true;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public override System.String? Name
#else
            public override System.String? Name
#endif
            {
                get
                {

                    if ((this.__mask0 & (byte)1) == 0)
                    {
                        this.__index0Value = ReadIndex0Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                        global::FlatSharp.Internal.SerializationHelpers.CombineMask(ref this.__mask0, (byte)1);
                    }
                    return this.__index0Value;

                }

                set
                {
                    global::FlatSharp.Internal.FSThrow.NotMutable();
                }
            }

#if NET7_0_OR_GREATER
            public override System.Int16 Damage
#else
            public override System.Int16 Damage
#endif
            {
                get
                {

                    if ((this.__mask0 & (byte)2) == 0)
                    {
                        this.__index1Value = ReadIndex1Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                        global::FlatSharp.Internal.SerializationHelpers.CombineMask(ref this.__mask0, (byte)2);
                    }
                    return this.__index1Value;

                }

                set
                {
                    global::FlatSharp.Internal.FSThrow.NotMutable();
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.String? ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {


                int absoluteLocation;
                {
                    int relativeOffset = vtable.OffsetOf(buffer, 0);
                    if (relativeOffset == 0)
                    {
                        return null;
                    }

                    absoluteLocation = offset + relativeOffset;
                }

                return global::FlatSharp.Compiler.Generated.N713267F71061CB50DD0B6E0459A8B28F01DB10694EEF7B2C6253EFEEF1AAB66E.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Int16 ReadIndex1Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {


                int absoluteLocation;
                {
                    int relativeOffset = vtable.OffsetOf(buffer, 1);
                    if (relativeOffset == 0)
                    {
                        return default(System.Int16);
                    }

                    absoluteLocation = offset + relativeOffset;
                }

                return global::FlatSharp.Compiler.Generated.N9CBCE75A2BC26BBA2ED1E6F2E5F55E58F4574F2859145403829FFA68EF023193.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
            }
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.NBE8605AB3AB3723C9078C39734BE0AB28ECA11EE3E0C92A5A92FCC8AEC6F3900.Helpers.tableReader_ce4756c340f64635850a581f5b3051fc_Greedy<TInputBuffer> Parse_Greedy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {

            return tableReader_ce4756c340f64635850a581f5b3051fc_Greedy<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
        }

        [System.Diagnostics.DebuggerDisplay("Greedy Weapon")]
        internal sealed class tableReader_ce4756c340f64635850a581f5b3051fc_Greedy<TInputBuffer>
            : global::FlatSharpEndToEndTests.ToStringMethods.Weapon
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.Greedy);



            private bool __isRoot;
            private System.String? __index0Value;
            private System.Int16 __index1Value;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_ce4756c340f64635850a581f5b3051fc_Greedy<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {

                tableReader_ce4756c340f64635850a581f5b3051fc_Greedy<TInputBuffer>? item = new tableReader_ce4756c340f64635850a581f5b3051fc_Greedy<TInputBuffer>();
                item.Initialize(buffer, offset, remainingDepth);
                return item;

            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_ce4756c340f64635850a581f5b3051fc_Greedy() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                VTable4.Create<TInputBuffer>(buffer, offset, out var vtable);
                this.__index0Value = ReadIndex0Value(buffer, offset, vtable, remainingDepth);
                this.__index1Value = ReadIndex1Value(buffer, offset, vtable, remainingDepth);
                base.OnFlatSharpDeserialized(__CtorContext);
            }


            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(FlatSharpEndToEndTests.ToStringMethods.Weapon);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => null;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => false;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public override System.String? Name
#else
            public override System.String? Name
#endif
            {
                get
                {
                    return this.__index0Value;
                }

                set
                {
                    global::FlatSharp.Internal.FSThrow.NotMutable();
                }
            }

#if NET7_0_OR_GREATER
            public override System.Int16 Damage
#else
            public override System.Int16 Damage
#endif
            {
                get
                {
                    return this.__index1Value;
                }

                set
                {
                    global::FlatSharp.Internal.FSThrow.NotMutable();
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.String? ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {


                int absoluteLocation;
                {
                    int relativeOffset = vtable.OffsetOf(buffer, 0);
                    if (relativeOffset == 0)
                    {
                        return null;
                    }

                    absoluteLocation = offset + relativeOffset;
                }

                return global::FlatSharp.Compiler.Generated.N713267F71061CB50DD0B6E0459A8B28F01DB10694EEF7B2C6253EFEEF1AAB66E.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Int16 ReadIndex1Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {


                int absoluteLocation;
                {
                    int relativeOffset = vtable.OffsetOf(buffer, 1);
                    if (relativeOffset == 0)
                    {
                        return default(System.Int16);
                    }

                    absoluteLocation = offset + relativeOffset;
                }

                return global::FlatSharp.Compiler.Generated.N9CBCE75A2BC26BBA2ED1E6F2E5F55E58F4574F2859145403829FFA68EF023193.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
            }
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.NBE8605AB3AB3723C9078C39734BE0AB28ECA11EE3E0C92A5A92FCC8AEC6F3900.Helpers.tableReader_ce4756c340f64635850a581f5b3051fc_GreedyMutable<TInputBuffer> Parse_GreedyMutable<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {

            return tableReader_ce4756c340f64635850a581f5b3051fc_GreedyMutable<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
        }

        [System.Diagnostics.DebuggerDisplay("GreedyMutable Weapon")]
        internal sealed class tableReader_ce4756c340f64635850a581f5b3051fc_GreedyMutable<TInputBuffer>
            : global::FlatSharpEndToEndTests.ToStringMethods.Weapon
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);



            private bool __isRoot;
            private System.String? __index0Value;
            private System.Int16 __index1Value;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_ce4756c340f64635850a581f5b3051fc_GreedyMutable<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {

                tableReader_ce4756c340f64635850a581f5b3051fc_GreedyMutable<TInputBuffer>? item = new tableReader_ce4756c340f64635850a581f5b3051fc_GreedyMutable<TInputBuffer>();
                item.Initialize(buffer, offset, remainingDepth);
                return item;

            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_ce4756c340f64635850a581f5b3051fc_GreedyMutable() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                VTable4.Create<TInputBuffer>(buffer, offset, out var vtable);
                this.__index0Value = ReadIndex0Value(buffer, offset, vtable, remainingDepth);
                this.__index1Value = ReadIndex1Value(buffer, offset, vtable, remainingDepth);
                base.OnFlatSharpDeserialized(__CtorContext);
            }


            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(FlatSharpEndToEndTests.ToStringMethods.Weapon);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => null;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => false;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public override System.String? Name
#else
            public override System.String? Name
#endif
            {
                get
                {
                    return this.__index0Value;
                }

                set
                {
                    this.__index0Value = value;
                }
            }

#if NET7_0_OR_GREATER
            public override System.Int16 Damage
#else
            public override System.Int16 Damage
#endif
            {
                get
                {
                    return this.__index1Value;
                }

                set
                {
                    this.__index1Value = value;
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.String? ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {


                int absoluteLocation;
                {
                    int relativeOffset = vtable.OffsetOf(buffer, 0);
                    if (relativeOffset == 0)
                    {
                        return null;
                    }

                    absoluteLocation = offset + relativeOffset;
                }

                return global::FlatSharp.Compiler.Generated.N713267F71061CB50DD0B6E0459A8B28F01DB10694EEF7B2C6253EFEEF1AAB66E.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Int16 ReadIndex1Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {


                int absoluteLocation;
                {
                    int relativeOffset = vtable.OffsetOf(buffer, 1);
                    if (relativeOffset == 0)
                    {
                        return default(System.Int16);
                    }

                    absoluteLocation = offset + relativeOffset;
                }

                return global::FlatSharp.Compiler.Generated.N9CBCE75A2BC26BBA2ED1E6F2E5F55E58F4574F2859145403829FFA68EF023193.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
            }
        }


        private static class tableMetadata_a1d1af80de2645b79a2b54a72414ce7d
        {

            public static readonly TableFieldContext Name = new TableFieldContext(
                "FlatSharpEndToEndTests.ToStringMethods.Weapon.Name",
                false,
                false);

            public static readonly TableFieldContext Damage = new TableFieldContext(
                "FlatSharpEndToEndTests.ToStringMethods.Weapon.Damage",
                false,
                false);
        }

    }
}




namespace FlatSharp.Compiler.Generated.N713267F71061CB50DD0B6E0459A8B28F01DB10694EEF7B2C6253EFEEF1AAB66E
{
    // Make sure we can reference the namespace of the type we are using.
    // Ensures that extension methods, etc are available.
    using System;

    internal static class Helpers
    {


        internal static int GetMaxSize(global::System.String value)
        {
            return SerializationHelpers.GetMaxSize(value);
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
        internal static void Serialize<TSpanWriter>(
            TSpanWriter spanWriter,
            Span<byte> span,
            global::System.String value,
            int offset
            , SerializationContext context
            , TableFieldContext fieldContext) where TSpanWriter : ISpanWriter
        {

            spanWriter.WriteString(
                span,
                value,
                offset,
                context);

        }



        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static string Parse<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {

            return buffer.ReadString(offset);
        }


    }
}




namespace FlatSharp.Compiler.Generated.NC274CD218E9DE0B3BDF675849D0907EA99BEB976F56808C38D86E7FB2E35311B
{
    // Make sure we can reference the namespace of the type we are using.
    // Ensures that extension methods, etc are available.
    using System;

    internal static class Helpers
    {

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static int GetMaxSize(global::System.Byte value)
        {
            return 1;
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static void Serialize<TSpanWriter>(
            TSpanWriter spanWriter,
            Span<byte> span,
            global::System.Byte value,
            int offset

            ) where TSpanWriter : ISpanWriter
        {
            spanWriter.WriteByte(span, value, offset);
        }



        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static byte Parse<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {

            return buffer.ReadByte(offset);
        }


    }
}




namespace FlatSharp.Compiler.Generated.N9CBCE75A2BC26BBA2ED1E6F2E5F55E58F4574F2859145403829FFA68EF023193
{
    // Make sure we can reference the namespace of the type we are using.
    // Ensures that extension methods, etc are available.
    using System;

    internal static class Helpers
    {

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static int GetMaxSize(global::System.Int16 value)
        {
            return 3;
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static void Serialize<TSpanWriter>(
            TSpanWriter spanWriter,
            Span<byte> span,
            global::System.Int16 value,
            int offset

            ) where TSpanWriter : ISpanWriter
        {
            spanWriter.WriteShort(span, value, offset);
        }



        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static short Parse<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {

            return buffer.ReadShort(offset);
        }


    }
}




namespace FlatSharp.Compiler.Generated.NAF59E17467AA695D5717DF567DBB82D0F54CB812DC4C885E9EA262BDE2F754D4
{
    // Make sure we can reference the namespace of the type we are using.
    // Ensures that extension methods, etc are available.
    using FlatSharpEndToEndTests.ToStringMethods;

    internal static class Helpers
    {


        internal static int GetMaxSize(global::FlatSharpEndToEndTests.ToStringMethods.Monster value)
        {

            int runningSum = 82 + 31;
            var index4Value = value.Name;

            if (!(index4Value is null))
            {
                runningSum += global::FlatSharp.Compiler.Generated.N713267F71061CB50DD0B6E0459A8B28F01DB10694EEF7B2C6253EFEEF1AAB66E.Helpers.GetMaxSize(index4Value);
            }
            var index6Value = value.Inventory;

            if (!(index6Value is null))
            {
                runningSum += global::FlatSharp.Compiler.Generated.N0518D85C3F33B46F4FC93A2AEFFEEB623E1E41020DA824F42C6FBFDCE3A6235B.Helpers.GetMaxSize(index6Value);
            }
            var index7Value = value.Weapons;

            if (!(index7Value is null))
            {
                runningSum += global::FlatSharp.Compiler.Generated.N213872E2C406FBA9E24DEEC64D5DCFFD8E66AB0AD567B02DDC2265D2A53920B1.Helpers.GetMaxSize(index7Value);
            }
            var index8Value = value.Equipped;

            if (!(index8Value is null))
            {
                runningSum += global::FlatSharp.Compiler.Generated.N6E5D813B62B51FDD040B2B7DDAE76B555675A50F4678D4269C28015193948026.Helpers.GetMaxSize(index8Value);
            }
            var index10Value = value.Path;

            if (!(index10Value is null))
            {
                runningSum += global::FlatSharp.Compiler.Generated.N60181949019DFA839B0CEF7CACE835F8811DFB03BF821B87F5AD148C3A0CB646.Helpers.GetMaxSize(index10Value);
            }
            return runningSum;

        }



        internal static void Serialize<TSpanWriter>(
            TSpanWriter spanWriter,
            Span<byte> span,
            global::FlatSharpEndToEndTests.ToStringMethods.Monster value,
            int offset
            , SerializationContext context
            ) where TSpanWriter : ISpanWriter
        {

            int tableStart = context.AllocateSpace(79, sizeof(int));
            spanWriter.WriteUOffset(span, offset, tableStart);
            int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

            int vtableLength = 4;
            Span<byte> vtable = stackalloc byte[30];

            spanWriter.WriteUShort(vtable, 0, 14);
            var index0Value = value.Color;
            var index1Value = value.Pos;
            var index2Value = value.Mana;
            var index3Value = value.HP;
            var index4Value = value.Name;
            var index6Value = value.Inventory;
            var index7Value = value.Weapons;
            var index8Value = value.Equipped;
            var index10Value = value.Path;
            var index11Value = value.ManaRegenRate;
            var index12Value = value.SecondaryColor;

            var index11Offset = tableStart;
            if (index11Value != default(System.Double))
            {


                currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 8);
                index11Offset = currentOffset;
                currentOffset += 8;


                global::FlatSharp.Compiler.Generated.N69778B0A505EF22DDC87C3C5ACB43FEC37AE9060433697AE39F2F466540F7A19.Helpers.Serialize(spanWriter, span, index11Value, index11Offset);



                if (28 > vtableLength)
                {
                    vtableLength = 28;
                }
            }

            spanWriter.WriteUShort(vtable, (ushort)(index11Offset - tableStart), 26);

            var index10Offset = tableStart;
            if (!(index10Value is null))
            {


                currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                index10Offset = currentOffset;
                currentOffset += 4;



                if (26 > vtableLength)
                {
                    vtableLength = 26;
                }
            }

            spanWriter.WriteUShort(vtable, (ushort)(index10Offset - tableStart), 24);

            var index9Offset = tableStart;
            if (!(index8Value is null))
            {


                currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                index9Offset = currentOffset;
                currentOffset += 4;



                if (24 > vtableLength)
                {
                    vtableLength = 24;
                }
            }

            spanWriter.WriteUShort(vtable, (ushort)(index9Offset - tableStart), 22);

            var index7Offset = tableStart;
            if (!(index7Value is null))
            {


                currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                index7Offset = currentOffset;
                currentOffset += 4;



                if (20 > vtableLength)
                {
                    vtableLength = 20;
                }
            }

            spanWriter.WriteUShort(vtable, (ushort)(index7Offset - tableStart), 18);

            var index6Offset = tableStart;
            if (!(index6Value is null))
            {


                currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                index6Offset = currentOffset;
                currentOffset += 4;



                if (18 > vtableLength)
                {
                    vtableLength = 18;
                }
            }

            spanWriter.WriteUShort(vtable, (ushort)(index6Offset - tableStart), 16);

            var index4Offset = tableStart;
            if (!(index4Value is null))
            {


                currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                index4Offset = currentOffset;
                currentOffset += 4;



                if (14 > vtableLength)
                {
                    vtableLength = 14;
                }
            }

            spanWriter.WriteUShort(vtable, (ushort)(index4Offset - tableStart), 12);

            var index1Offset = tableStart;
            if (!(index1Value is null))
            {


                currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                index1Offset = currentOffset;
                currentOffset += 12;


                global::FlatSharp.Compiler.Generated.NCA8F6A43FE1CC3351FF3686403C7DDEED48B67F88229CA34F216E4BF3027DA45.Helpers.Serialize(spanWriter, span, index1Value, index1Offset);



                if (8 > vtableLength)
                {
                    vtableLength = 8;
                }
            }

            spanWriter.WriteUShort(vtable, (ushort)(index1Offset - tableStart), 6);

            var index3Offset = tableStart;
            if (index3Value != (System.Int16)(100))
            {


                currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 2);
                index3Offset = currentOffset;
                currentOffset += 2;


                global::FlatSharp.Compiler.Generated.N9CBCE75A2BC26BBA2ED1E6F2E5F55E58F4574F2859145403829FFA68EF023193.Helpers.Serialize(spanWriter, span, index3Value, index3Offset);



                if (12 > vtableLength)
                {
                    vtableLength = 12;
                }
            }

            spanWriter.WriteUShort(vtable, (ushort)(index3Offset - tableStart), 10);

            var index2Offset = tableStart;
            if (index2Value != (System.Int16)(150))
            {


                currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 2);
                index2Offset = currentOffset;
                currentOffset += 2;


                global::FlatSharp.Compiler.Generated.N9CBCE75A2BC26BBA2ED1E6F2E5F55E58F4574F2859145403829FFA68EF023193.Helpers.Serialize(spanWriter, span, index2Value, index2Offset);



                if (10 > vtableLength)
                {
                    vtableLength = 10;
                }
            }

            spanWriter.WriteUShort(vtable, (ushort)(index2Offset - tableStart), 8);

            var index12Offset = tableStart;
            if (index12Value != default(FlatSharpEndToEndTests.ToStringMethods.Color))
            {


                currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 1);
                index12Offset = currentOffset;
                currentOffset += 1;


                global::FlatSharp.Compiler.Generated.N9ECB557C4088DE7F9A350F3B558CCA88B930AF416282C303F434971E5DB5E0B3.Helpers.Serialize(spanWriter, span, index12Value, index12Offset);

                vtableLength = 30;
            }

            spanWriter.WriteUShort(vtable, (ushort)(index12Offset - tableStart), 28);

            var index8Offset = tableStart;
            if (!(index8Value is null))
            {


                currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 1);
                index8Offset = currentOffset;
                currentOffset += 1;


            }

            spanWriter.WriteUShort(vtable, (ushort)(index8Offset - tableStart), 20);

            var index0Offset = tableStart;
            if (index0Value != default(FlatSharpEndToEndTests.ToStringMethods.Color))
            {


                currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 1);
                index0Offset = currentOffset;
                currentOffset += 1;


                global::FlatSharp.Compiler.Generated.N9ECB557C4088DE7F9A350F3B558CCA88B930AF416282C303F434971E5DB5E0B3.Helpers.Serialize(spanWriter, span, index0Value, index0Offset);



                if (6 > vtableLength)
                {
                    vtableLength = 6;
                }
            }

            spanWriter.WriteUShort(vtable, (ushort)(index0Offset - tableStart), 4);
            int tableLength = currentOffset - tableStart;
            context.Offset -= 79 - tableLength;
            spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0);
            spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort));
            int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
            spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart);

            if (index10Offset != tableStart)
            {


                global::FlatSharp.Compiler.Generated.N60181949019DFA839B0CEF7CACE835F8811DFB03BF821B87F5AD148C3A0CB646.Helpers.Serialize(spanWriter, span, index10Value!, index10Offset, context);

            }


            if (index7Offset != tableStart)
            {


                global::FlatSharp.Compiler.Generated.N213872E2C406FBA9E24DEEC64D5DCFFD8E66AB0AD567B02DDC2265D2A53920B1.Helpers.Serialize(spanWriter, span, index7Value!, index7Offset, context);

            }


            if (index6Offset != tableStart)
            {


                global::FlatSharp.Compiler.Generated.N0518D85C3F33B46F4FC93A2AEFFEEB623E1E41020DA824F42C6FBFDCE3A6235B.Helpers.Serialize(spanWriter, span, index6Value, index6Offset, context);

            }


            if (index4Offset != tableStart)
            {


                global::FlatSharp.Compiler.Generated.N713267F71061CB50DD0B6E0459A8B28F01DB10694EEF7B2C6253EFEEF1AAB66E.Helpers.Serialize(spanWriter, span, index4Value!, index4Offset, context, tableMetadata_c59363849d00449cb9c532de82f92b8b.Name);

            }


            if (index8Offset != tableStart)
            {

                var offsetTuple = (index8Offset, index9Offset);
                global::FlatSharp.Compiler.Generated.N6E5D813B62B51FDD040B2B7DDAE76B555675A50F4678D4269C28015193948026.Helpers.Serialize(spanWriter, span, index8Value, ref offsetTuple, context, tableMetadata_c59363849d00449cb9c532de82f92b8b.Equipped);

            }

        }



        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.NAF59E17467AA695D5717DF567DBB82D0F54CB812DC4C885E9EA262BDE2F754D4.Helpers.tableReader_b703c826ef6241ea92fb057fdd320a79_Lazy<TInputBuffer> Parse_Lazy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {

            return tableReader_b703c826ef6241ea92fb057fdd320a79_Lazy<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
        }

        [System.Diagnostics.DebuggerDisplay("Lazy Monster")]
        internal sealed class tableReader_b703c826ef6241ea92fb057fdd320a79_Lazy<TInputBuffer>
            : global::FlatSharpEndToEndTests.ToStringMethods.Monster
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.Lazy);



            private bool __isRoot;
            private TInputBuffer __buffer;
            private int __offset;
            private short __remainingDepth;
            private VTableGeneric __vtable;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_b703c826ef6241ea92fb057fdd320a79_Lazy<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {

                tableReader_b703c826ef6241ea92fb057fdd320a79_Lazy<TInputBuffer>? item = new tableReader_b703c826ef6241ea92fb057fdd320a79_Lazy<TInputBuffer>();
                item.Initialize(buffer, offset, remainingDepth);
                return item;

            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_b703c826ef6241ea92fb057fdd320a79_Lazy() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                this.__buffer = buffer;
                this.__offset = offset;
                this.__remainingDepth = remainingDepth;
                VTableGeneric.Create<TInputBuffer>(buffer, offset, out this.__vtable);
                base.OnFlatSharpDeserialized(__CtorContext);
            }


            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(FlatSharpEndToEndTests.ToStringMethods.Monster);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => this.__buffer;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => true;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public override FlatSharpEndToEndTests.ToStringMethods.Color Color
#else
            public override FlatSharpEndToEndTests.ToStringMethods.Color Color
#endif
            {
                get
                {
                    return ReadIndex0Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                }

                set
                {
                    global::FlatSharp.Internal.FSThrow.NotMutable();
                }
            }

#if NET7_0_OR_GREATER
            public override System.Nullable<FlatSharpEndToEndTests.ToStringMethods.Vec3> Pos
#else
            public override System.Nullable<FlatSharpEndToEndTests.ToStringMethods.Vec3> Pos
#endif
            {
                get
                {
                    return ReadIndex1Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                }

                set
                {
                    global::FlatSharp.Internal.FSThrow.NotMutable();
                }
            }

#if NET7_0_OR_GREATER
            public override System.Int16 Mana
#else
            public override System.Int16 Mana
#endif
            {
                get
                {
                    return ReadIndex2Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                }

                set
                {
                    global::FlatSharp.Internal.FSThrow.NotMutable();
                }
            }

#if NET7_0_OR_GREATER
            public override System.Int16 HP
#else
            public override System.Int16 HP
#endif
            {
                get
                {
                    return ReadIndex3Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                }

                set
                {
                    global::FlatSharp.Internal.FSThrow.NotMutable();
                }
            }

#if NET7_0_OR_GREATER
            public override System.String? Name
#else
            public override System.String? Name
#endif
            {
                get
                {
                    return ReadIndex4Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                }

                set
                {
                    global::FlatSharp.Internal.FSThrow.NotMutable();
                }
            }

#if NET7_0_OR_GREATER
            public override System.Nullable<System.Memory<System.Byte>> Inventory
#else
            public override System.Nullable<System.Memory<System.Byte>> Inventory
#endif
            {
                get
                {
                    return ReadIndex6Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                }

                set
                {
                    global::FlatSharp.Internal.FSThrow.NotMutable();
                }
            }

#if NET7_0_OR_GREATER
            public override System.Collections.Generic.IList<FlatSharpEndToEndTests.ToStringMethods.Weapon>? Weapons
#else
            public override System.Collections.Generic.IList<FlatSharpEndToEndTests.ToStringMethods.Weapon>? Weapons
#endif
            {
                get
                {
                    return ReadIndex7Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                }

                set
                {
                    global::FlatSharp.Internal.FSThrow.NotMutable();
                }
            }

#if NET7_0_OR_GREATER
            public override System.Nullable<FlatSharpEndToEndTests.ToStringMethods.Equipped> Equipped
#else
            public override System.Nullable<FlatSharpEndToEndTests.ToStringMethods.Equipped> Equipped
#endif
            {
                get
                {
                    return ReadIndex8Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                }

                set
                {
                    global::FlatSharp.Internal.FSThrow.NotMutable();
                }
            }

#if NET7_0_OR_GREATER
            public override System.Collections.Generic.IList<FlatSharpEndToEndTests.ToStringMethods.Vec3>? Path
#else
            public override System.Collections.Generic.IList<FlatSharpEndToEndTests.ToStringMethods.Vec3>? Path
#endif
            {
                get
                {
                    return ReadIndex10Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                }

                set
                {
                    global::FlatSharp.Internal.FSThrow.NotMutable();
                }
            }

#if NET7_0_OR_GREATER
            public override System.Double ManaRegenRate
#else
            public override System.Double ManaRegenRate
#endif
            {
                get
                {
                    return ReadIndex11Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                }

                set
                {
                    global::FlatSharp.Internal.FSThrow.NotMutable();
                }
            }

#if NET7_0_OR_GREATER
            public override FlatSharpEndToEndTests.ToStringMethods.Color SecondaryColor
#else
            public override FlatSharpEndToEndTests.ToStringMethods.Color SecondaryColor
#endif
            {
                get
                {
                    return ReadIndex12Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                }

                set
                {
                    global::FlatSharp.Internal.FSThrow.NotMutable();
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static FlatSharpEndToEndTests.ToStringMethods.Color ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTableGeneric vtable,
                short remainingDepth)
            {


                int absoluteLocation;
                {
                    int relativeOffset = vtable.OffsetOf(buffer, 0);
                    if (relativeOffset == 0)
                    {
                        return default(FlatSharpEndToEndTests.ToStringMethods.Color);
                    }

                    absoluteLocation = offset + relativeOffset;
                }

                return global::FlatSharp.Compiler.Generated.N9ECB557C4088DE7F9A350F3B558CCA88B930AF416282C303F434971E5DB5E0B3.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Nullable<FlatSharpEndToEndTests.ToStringMethods.Vec3> ReadIndex1Value(
                TInputBuffer buffer,
                int offset,
                VTableGeneric vtable,
                short remainingDepth)
            {


                int absoluteLocation;
                {
                    int relativeOffset = vtable.OffsetOf(buffer, 1);
                    if (relativeOffset == 0)
                    {
                        return null;
                    }

                    absoluteLocation = offset + relativeOffset;
                }

                return global::FlatSharp.Compiler.Generated.NCA8F6A43FE1CC3351FF3686403C7DDEED48B67F88229CA34F216E4BF3027DA45.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Int16 ReadIndex2Value(
                TInputBuffer buffer,
                int offset,
                VTableGeneric vtable,
                short remainingDepth)
            {


                int absoluteLocation;
                {
                    int relativeOffset = vtable.OffsetOf(buffer, 2);
                    if (relativeOffset == 0)
                    {
                        return (System.Int16)(150);
                    }

                    absoluteLocation = offset + relativeOffset;
                }

                return global::FlatSharp.Compiler.Generated.N9CBCE75A2BC26BBA2ED1E6F2E5F55E58F4574F2859145403829FFA68EF023193.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Int16 ReadIndex3Value(
                TInputBuffer buffer,
                int offset,
                VTableGeneric vtable,
                short remainingDepth)
            {


                int absoluteLocation;
                {
                    int relativeOffset = vtable.OffsetOf(buffer, 3);
                    if (relativeOffset == 0)
                    {
                        return (System.Int16)(100);
                    }

                    absoluteLocation = offset + relativeOffset;
                }

                return global::FlatSharp.Compiler.Generated.N9CBCE75A2BC26BBA2ED1E6F2E5F55E58F4574F2859145403829FFA68EF023193.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.String? ReadIndex4Value(
                TInputBuffer buffer,
                int offset,
                VTableGeneric vtable,
                short remainingDepth)
            {


                int absoluteLocation;
                {
                    int relativeOffset = vtable.OffsetOf(buffer, 4);
                    if (relativeOffset == 0)
                    {
                        return null;
                    }

                    absoluteLocation = offset + relativeOffset;
                }

                return global::FlatSharp.Compiler.Generated.N713267F71061CB50DD0B6E0459A8B28F01DB10694EEF7B2C6253EFEEF1AAB66E.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Nullable<System.Memory<System.Byte>> ReadIndex6Value(
                TInputBuffer buffer,
                int offset,
                VTableGeneric vtable,
                short remainingDepth)
            {


                int absoluteLocation;
                {
                    int relativeOffset = vtable.OffsetOf(buffer, 6);
                    if (relativeOffset == 0)
                    {
                        return null;
                    }

                    absoluteLocation = offset + relativeOffset;
                }

                return global::FlatSharp.Compiler.Generated.N0518D85C3F33B46F4FC93A2AEFFEEB623E1E41020DA824F42C6FBFDCE3A6235B.Helpers.Parse_Lazy(buffer, absoluteLocation, remainingDepth, tableMetadata_c59363849d00449cb9c532de82f92b8b.Inventory);
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Collections.Generic.IList<FlatSharpEndToEndTests.ToStringMethods.Weapon>? ReadIndex7Value(
                TInputBuffer buffer,
                int offset,
                VTableGeneric vtable,
                short remainingDepth)
            {


                int absoluteLocation;
                {
                    int relativeOffset = vtable.OffsetOf(buffer, 7);
                    if (relativeOffset == 0)
                    {
                        return null;
                    }

                    absoluteLocation = offset + relativeOffset;
                }

                return global::FlatSharp.Compiler.Generated.N213872E2C406FBA9E24DEEC64D5DCFFD8E66AB0AD567B02DDC2265D2A53920B1.Helpers.Parse_Lazy(buffer, absoluteLocation, remainingDepth, tableMetadata_c59363849d00449cb9c532de82f92b8b.Weapons);
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Nullable<FlatSharpEndToEndTests.ToStringMethods.Equipped> ReadIndex8Value(
                TInputBuffer buffer,
                int offset,
                VTableGeneric vtable,
                short remainingDepth)
            {

                bool allZero = true;
                bool anyZero = false;


                int relativeOffset0 = vtable.OffsetOf<TInputBuffer>(buffer, 8);
                bool isZero0 = relativeOffset0 == 0;
                allZero &= isZero0;


                anyZero |= isZero0;


                int relativeOffset1 = vtable.OffsetOf<TInputBuffer>(buffer, 9);
                bool isZero1 = relativeOffset1 == 0;
                allZero &= isZero1;


                anyZero |= isZero1;


                if (allZero)
                {
                    return null;
                }

                if (anyZero)
                {
                    global::FlatSharp.Internal.FSThrow.InvalidData_UnionOnlyPartiallyPresent("FlatSharpEndToEndTests.ToStringMethods.Monster.Equipped");
                }

                var absoluteLocations = (relativeOffset0 + offset, relativeOffset1 + offset);
                return global::FlatSharp.Compiler.Generated.N6E5D813B62B51FDD040B2B7DDAE76B555675A50F4678D4269C28015193948026.Helpers.Parse_Lazy(buffer, ref absoluteLocations, remainingDepth);
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Collections.Generic.IList<FlatSharpEndToEndTests.ToStringMethods.Vec3>? ReadIndex10Value(
                TInputBuffer buffer,
                int offset,
                VTableGeneric vtable,
                short remainingDepth)
            {


                int absoluteLocation;
                {
                    int relativeOffset = vtable.OffsetOf(buffer, 10);
                    if (relativeOffset == 0)
                    {
                        return null;
                    }

                    absoluteLocation = offset + relativeOffset;
                }

                return global::FlatSharp.Compiler.Generated.N60181949019DFA839B0CEF7CACE835F8811DFB03BF821B87F5AD148C3A0CB646.Helpers.Parse_Lazy(buffer, absoluteLocation, remainingDepth, tableMetadata_c59363849d00449cb9c532de82f92b8b.Path);
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Double ReadIndex11Value(
                TInputBuffer buffer,
                int offset,
                VTableGeneric vtable,
                short remainingDepth)
            {


                int absoluteLocation;
                {
                    int relativeOffset = vtable.OffsetOf(buffer, 11);
                    if (relativeOffset == 0)
                    {
                        return default(System.Double);
                    }

                    absoluteLocation = offset + relativeOffset;
                }

                return global::FlatSharp.Compiler.Generated.N69778B0A505EF22DDC87C3C5ACB43FEC37AE9060433697AE39F2F466540F7A19.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static FlatSharpEndToEndTests.ToStringMethods.Color ReadIndex12Value(
                TInputBuffer buffer,
                int offset,
                VTableGeneric vtable,
                short remainingDepth)
            {


                int absoluteLocation;
                {
                    int relativeOffset = vtable.OffsetOf(buffer, 12);
                    if (relativeOffset == 0)
                    {
                        return default(FlatSharpEndToEndTests.ToStringMethods.Color);
                    }

                    absoluteLocation = offset + relativeOffset;
                }

                return global::FlatSharp.Compiler.Generated.N9ECB557C4088DE7F9A350F3B558CCA88B930AF416282C303F434971E5DB5E0B3.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
            }
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.NAF59E17467AA695D5717DF567DBB82D0F54CB812DC4C885E9EA262BDE2F754D4.Helpers.tableReader_b703c826ef6241ea92fb057fdd320a79_Progressive<TInputBuffer> Parse_Progressive<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {

            return tableReader_b703c826ef6241ea92fb057fdd320a79_Progressive<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
        }

        [System.Diagnostics.DebuggerDisplay("Progressive Monster")]
        internal sealed class tableReader_b703c826ef6241ea92fb057fdd320a79_Progressive<TInputBuffer>
            : global::FlatSharpEndToEndTests.ToStringMethods.Monster
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.Progressive);



            private bool __isRoot;
            private TInputBuffer __buffer;
            private int __offset;
            private short __remainingDepth;
            private VTableGeneric __vtable;
            private byte __mask0;
            private FlatSharpEndToEndTests.ToStringMethods.Color __index0Value;
            private System.Nullable<FlatSharpEndToEndTests.ToStringMethods.Vec3> __index1Value;
            private System.Int16 __index2Value;
            private System.Int16 __index3Value;
            private System.String? __index4Value;
            private System.Nullable<System.Memory<System.Byte>> __index6Value;
            private System.Collections.Generic.IList<FlatSharpEndToEndTests.ToStringMethods.Weapon>? __index7Value;
            private byte __mask1;
            private System.Nullable<FlatSharpEndToEndTests.ToStringMethods.Equipped> __index8Value;
            private System.Collections.Generic.IList<FlatSharpEndToEndTests.ToStringMethods.Vec3>? __index10Value;
            private System.Double __index11Value;
            private FlatSharpEndToEndTests.ToStringMethods.Color __index12Value;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_b703c826ef6241ea92fb057fdd320a79_Progressive<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {

                tableReader_b703c826ef6241ea92fb057fdd320a79_Progressive<TInputBuffer>? item = new tableReader_b703c826ef6241ea92fb057fdd320a79_Progressive<TInputBuffer>();
                item.Initialize(buffer, offset, remainingDepth);
                return item;

            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_b703c826ef6241ea92fb057fdd320a79_Progressive() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                this.__buffer = buffer;
                this.__offset = offset;
                this.__remainingDepth = remainingDepth;
                VTableGeneric.Create<TInputBuffer>(buffer, offset, out this.__vtable);
                base.OnFlatSharpDeserialized(__CtorContext);
            }


            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(FlatSharpEndToEndTests.ToStringMethods.Monster);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => this.__buffer;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => true;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public override FlatSharpEndToEndTests.ToStringMethods.Color Color
#else
            public override FlatSharpEndToEndTests.ToStringMethods.Color Color
#endif
            {
                get
                {

                    if ((this.__mask0 & (byte)1) == 0)
                    {
                        this.__index0Value = ReadIndex0Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                        global::FlatSharp.Internal.SerializationHelpers.CombineMask(ref this.__mask0, (byte)1);
                    }
                    return this.__index0Value;

                }

                set
                {
                    global::FlatSharp.Internal.FSThrow.NotMutable();
                }
            }

#if NET7_0_OR_GREATER
            public override System.Nullable<FlatSharpEndToEndTests.ToStringMethods.Vec3> Pos
#else
            public override System.Nullable<FlatSharpEndToEndTests.ToStringMethods.Vec3> Pos
#endif
            {
                get
                {

                    if ((this.__mask0 & (byte)2) == 0)
                    {
                        this.__index1Value = ReadIndex1Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                        global::FlatSharp.Internal.SerializationHelpers.CombineMask(ref this.__mask0, (byte)2);
                    }
                    return this.__index1Value;

                }

                set
                {
                    global::FlatSharp.Internal.FSThrow.NotMutable();
                }
            }

#if NET7_0_OR_GREATER
            public override System.Int16 Mana
#else
            public override System.Int16 Mana
#endif
            {
                get
                {

                    if ((this.__mask0 & (byte)4) == 0)
                    {
                        this.__index2Value = ReadIndex2Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                        global::FlatSharp.Internal.SerializationHelpers.CombineMask(ref this.__mask0, (byte)4);
                    }
                    return this.__index2Value;

                }

                set
                {
                    global::FlatSharp.Internal.FSThrow.NotMutable();
                }
            }

#if NET7_0_OR_GREATER
            public override System.Int16 HP
#else
            public override System.Int16 HP
#endif
            {
                get
                {

                    if ((this.__mask0 & (byte)8) == 0)
                    {
                        this.__index3Value = ReadIndex3Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                        global::FlatSharp.Internal.SerializationHelpers.CombineMask(ref this.__mask0, (byte)8);
                    }
                    return this.__index3Value;

                }

                set
                {
                    global::FlatSharp.Internal.FSThrow.NotMutable();
                }
            }

#if NET7_0_OR_GREATER
            public override System.String? Name
#else
            public override System.String? Name
#endif
            {
                get
                {

                    if ((this.__mask0 & (byte)16) == 0)
                    {
                        this.__index4Value = ReadIndex4Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                        global::FlatSharp.Internal.SerializationHelpers.CombineMask(ref this.__mask0, (byte)16);
                    }
                    return this.__index4Value;

                }

                set
                {
                    global::FlatSharp.Internal.FSThrow.NotMutable();
                }
            }

#if NET7_0_OR_GREATER
            public override System.Nullable<System.Memory<System.Byte>> Inventory
#else
            public override System.Nullable<System.Memory<System.Byte>> Inventory
#endif
            {
                get
                {

                    if ((this.__mask0 & (byte)64) == 0)
                    {
                        this.__index6Value = ReadIndex6Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                        global::FlatSharp.Internal.SerializationHelpers.CombineMask(ref this.__mask0, (byte)64);
                    }
                    return this.__index6Value;

                }

                set
                {
                    global::FlatSharp.Internal.FSThrow.NotMutable();
                }
            }

#if NET7_0_OR_GREATER
            public override System.Collections.Generic.IList<FlatSharpEndToEndTests.ToStringMethods.Weapon>? Weapons
#else
            public override System.Collections.Generic.IList<FlatSharpEndToEndTests.ToStringMethods.Weapon>? Weapons
#endif
            {
                get
                {

                    if ((this.__mask0 & (byte)128) == 0)
                    {
                        this.__index7Value = ReadIndex7Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                        global::FlatSharp.Internal.SerializationHelpers.CombineMask(ref this.__mask0, (byte)128);
                    }
                    return this.__index7Value;

                }

                set
                {
                    global::FlatSharp.Internal.FSThrow.NotMutable();
                }
            }

#if NET7_0_OR_GREATER
            public override System.Nullable<FlatSharpEndToEndTests.ToStringMethods.Equipped> Equipped
#else
            public override System.Nullable<FlatSharpEndToEndTests.ToStringMethods.Equipped> Equipped
#endif
            {
                get
                {

                    if ((this.__mask1 & (byte)1) == 0)
                    {
                        this.__index8Value = ReadIndex8Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                        global::FlatSharp.Internal.SerializationHelpers.CombineMask(ref this.__mask1, (byte)1);
                    }
                    return this.__index8Value;

                }

                set
                {
                    global::FlatSharp.Internal.FSThrow.NotMutable();
                }
            }

#if NET7_0_OR_GREATER
            public override System.Collections.Generic.IList<FlatSharpEndToEndTests.ToStringMethods.Vec3>? Path
#else
            public override System.Collections.Generic.IList<FlatSharpEndToEndTests.ToStringMethods.Vec3>? Path
#endif
            {
                get
                {

                    if ((this.__mask1 & (byte)4) == 0)
                    {
                        this.__index10Value = ReadIndex10Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                        global::FlatSharp.Internal.SerializationHelpers.CombineMask(ref this.__mask1, (byte)4);
                    }
                    return this.__index10Value;

                }

                set
                {
                    global::FlatSharp.Internal.FSThrow.NotMutable();
                }
            }

#if NET7_0_OR_GREATER
            public override System.Double ManaRegenRate
#else
            public override System.Double ManaRegenRate
#endif
            {
                get
                {

                    if ((this.__mask1 & (byte)8) == 0)
                    {
                        this.__index11Value = ReadIndex11Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                        global::FlatSharp.Internal.SerializationHelpers.CombineMask(ref this.__mask1, (byte)8);
                    }
                    return this.__index11Value;

                }

                set
                {
                    global::FlatSharp.Internal.FSThrow.NotMutable();
                }
            }

#if NET7_0_OR_GREATER
            public override FlatSharpEndToEndTests.ToStringMethods.Color SecondaryColor
#else
            public override FlatSharpEndToEndTests.ToStringMethods.Color SecondaryColor
#endif
            {
                get
                {

                    if ((this.__mask1 & (byte)16) == 0)
                    {
                        this.__index12Value = ReadIndex12Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                        global::FlatSharp.Internal.SerializationHelpers.CombineMask(ref this.__mask1, (byte)16);
                    }
                    return this.__index12Value;

                }

                set
                {
                    global::FlatSharp.Internal.FSThrow.NotMutable();
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static FlatSharpEndToEndTests.ToStringMethods.Color ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTableGeneric vtable,
                short remainingDepth)
            {


                int absoluteLocation;
                {
                    int relativeOffset = vtable.OffsetOf(buffer, 0);
                    if (relativeOffset == 0)
                    {
                        return default(FlatSharpEndToEndTests.ToStringMethods.Color);
                    }

                    absoluteLocation = offset + relativeOffset;
                }

                return global::FlatSharp.Compiler.Generated.N9ECB557C4088DE7F9A350F3B558CCA88B930AF416282C303F434971E5DB5E0B3.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Nullable<FlatSharpEndToEndTests.ToStringMethods.Vec3> ReadIndex1Value(
                TInputBuffer buffer,
                int offset,
                VTableGeneric vtable,
                short remainingDepth)
            {


                int absoluteLocation;
                {
                    int relativeOffset = vtable.OffsetOf(buffer, 1);
                    if (relativeOffset == 0)
                    {
                        return null;
                    }

                    absoluteLocation = offset + relativeOffset;
                }

                return global::FlatSharp.Compiler.Generated.NCA8F6A43FE1CC3351FF3686403C7DDEED48B67F88229CA34F216E4BF3027DA45.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Int16 ReadIndex2Value(
                TInputBuffer buffer,
                int offset,
                VTableGeneric vtable,
                short remainingDepth)
            {


                int absoluteLocation;
                {
                    int relativeOffset = vtable.OffsetOf(buffer, 2);
                    if (relativeOffset == 0)
                    {
                        return (System.Int16)(150);
                    }

                    absoluteLocation = offset + relativeOffset;
                }

                return global::FlatSharp.Compiler.Generated.N9CBCE75A2BC26BBA2ED1E6F2E5F55E58F4574F2859145403829FFA68EF023193.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Int16 ReadIndex3Value(
                TInputBuffer buffer,
                int offset,
                VTableGeneric vtable,
                short remainingDepth)
            {


                int absoluteLocation;
                {
                    int relativeOffset = vtable.OffsetOf(buffer, 3);
                    if (relativeOffset == 0)
                    {
                        return (System.Int16)(100);
                    }

                    absoluteLocation = offset + relativeOffset;
                }

                return global::FlatSharp.Compiler.Generated.N9CBCE75A2BC26BBA2ED1E6F2E5F55E58F4574F2859145403829FFA68EF023193.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.String? ReadIndex4Value(
                TInputBuffer buffer,
                int offset,
                VTableGeneric vtable,
                short remainingDepth)
            {


                int absoluteLocation;
                {
                    int relativeOffset = vtable.OffsetOf(buffer, 4);
                    if (relativeOffset == 0)
                    {
                        return null;
                    }

                    absoluteLocation = offset + relativeOffset;
                }

                return global::FlatSharp.Compiler.Generated.N713267F71061CB50DD0B6E0459A8B28F01DB10694EEF7B2C6253EFEEF1AAB66E.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Nullable<System.Memory<System.Byte>> ReadIndex6Value(
                TInputBuffer buffer,
                int offset,
                VTableGeneric vtable,
                short remainingDepth)
            {


                int absoluteLocation;
                {
                    int relativeOffset = vtable.OffsetOf(buffer, 6);
                    if (relativeOffset == 0)
                    {
                        return null;
                    }

                    absoluteLocation = offset + relativeOffset;
                }

                return global::FlatSharp.Compiler.Generated.N0518D85C3F33B46F4FC93A2AEFFEEB623E1E41020DA824F42C6FBFDCE3A6235B.Helpers.Parse_Progressive(buffer, absoluteLocation, remainingDepth, tableMetadata_c59363849d00449cb9c532de82f92b8b.Inventory);
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Collections.Generic.IList<FlatSharpEndToEndTests.ToStringMethods.Weapon>? ReadIndex7Value(
                TInputBuffer buffer,
                int offset,
                VTableGeneric vtable,
                short remainingDepth)
            {


                int absoluteLocation;
                {
                    int relativeOffset = vtable.OffsetOf(buffer, 7);
                    if (relativeOffset == 0)
                    {
                        return null;
                    }

                    absoluteLocation = offset + relativeOffset;
                }

                return global::FlatSharp.Compiler.Generated.N213872E2C406FBA9E24DEEC64D5DCFFD8E66AB0AD567B02DDC2265D2A53920B1.Helpers.Parse_Progressive(buffer, absoluteLocation, remainingDepth, tableMetadata_c59363849d00449cb9c532de82f92b8b.Weapons);
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Nullable<FlatSharpEndToEndTests.ToStringMethods.Equipped> ReadIndex8Value(
                TInputBuffer buffer,
                int offset,
                VTableGeneric vtable,
                short remainingDepth)
            {

                bool allZero = true;
                bool anyZero = false;


                int relativeOffset0 = vtable.OffsetOf<TInputBuffer>(buffer, 8);
                bool isZero0 = relativeOffset0 == 0;
                allZero &= isZero0;


                anyZero |= isZero0;


                int relativeOffset1 = vtable.OffsetOf<TInputBuffer>(buffer, 9);
                bool isZero1 = relativeOffset1 == 0;
                allZero &= isZero1;


                anyZero |= isZero1;


                if (allZero)
                {
                    return null;
                }

                if (anyZero)
                {
                    global::FlatSharp.Internal.FSThrow.InvalidData_UnionOnlyPartiallyPresent("FlatSharpEndToEndTests.ToStringMethods.Monster.Equipped");
                }

                var absoluteLocations = (relativeOffset0 + offset, relativeOffset1 + offset);
                return global::FlatSharp.Compiler.Generated.N6E5D813B62B51FDD040B2B7DDAE76B555675A50F4678D4269C28015193948026.Helpers.Parse_Progressive(buffer, ref absoluteLocations, remainingDepth);
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Collections.Generic.IList<FlatSharpEndToEndTests.ToStringMethods.Vec3>? ReadIndex10Value(
                TInputBuffer buffer,
                int offset,
                VTableGeneric vtable,
                short remainingDepth)
            {


                int absoluteLocation;
                {
                    int relativeOffset = vtable.OffsetOf(buffer, 10);
                    if (relativeOffset == 0)
                    {
                        return null;
                    }

                    absoluteLocation = offset + relativeOffset;
                }

                return global::FlatSharp.Compiler.Generated.N60181949019DFA839B0CEF7CACE835F8811DFB03BF821B87F5AD148C3A0CB646.Helpers.Parse_Progressive(buffer, absoluteLocation, remainingDepth, tableMetadata_c59363849d00449cb9c532de82f92b8b.Path);
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Double ReadIndex11Value(
                TInputBuffer buffer,
                int offset,
                VTableGeneric vtable,
                short remainingDepth)
            {


                int absoluteLocation;
                {
                    int relativeOffset = vtable.OffsetOf(buffer, 11);
                    if (relativeOffset == 0)
                    {
                        return default(System.Double);
                    }

                    absoluteLocation = offset + relativeOffset;
                }

                return global::FlatSharp.Compiler.Generated.N69778B0A505EF22DDC87C3C5ACB43FEC37AE9060433697AE39F2F466540F7A19.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static FlatSharpEndToEndTests.ToStringMethods.Color ReadIndex12Value(
                TInputBuffer buffer,
                int offset,
                VTableGeneric vtable,
                short remainingDepth)
            {


                int absoluteLocation;
                {
                    int relativeOffset = vtable.OffsetOf(buffer, 12);
                    if (relativeOffset == 0)
                    {
                        return default(FlatSharpEndToEndTests.ToStringMethods.Color);
                    }

                    absoluteLocation = offset + relativeOffset;
                }

                return global::FlatSharp.Compiler.Generated.N9ECB557C4088DE7F9A350F3B558CCA88B930AF416282C303F434971E5DB5E0B3.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
            }
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.NAF59E17467AA695D5717DF567DBB82D0F54CB812DC4C885E9EA262BDE2F754D4.Helpers.tableReader_b703c826ef6241ea92fb057fdd320a79_Greedy<TInputBuffer> Parse_Greedy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {

            return tableReader_b703c826ef6241ea92fb057fdd320a79_Greedy<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
        }

        [System.Diagnostics.DebuggerDisplay("Greedy Monster")]
        internal sealed class tableReader_b703c826ef6241ea92fb057fdd320a79_Greedy<TInputBuffer>
            : global::FlatSharpEndToEndTests.ToStringMethods.Monster
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.Greedy);



            private bool __isRoot;
            private FlatSharpEndToEndTests.ToStringMethods.Color __index0Value;
            private System.Nullable<FlatSharpEndToEndTests.ToStringMethods.Vec3> __index1Value;
            private System.Int16 __index2Value;
            private System.Int16 __index3Value;
            private System.String? __index4Value;
            private System.Nullable<System.Memory<System.Byte>> __index6Value;
            private System.Collections.Generic.IList<FlatSharpEndToEndTests.ToStringMethods.Weapon>? __index7Value;
            private System.Nullable<FlatSharpEndToEndTests.ToStringMethods.Equipped> __index8Value;
            private System.Collections.Generic.IList<FlatSharpEndToEndTests.ToStringMethods.Vec3>? __index10Value;
            private System.Double __index11Value;
            private FlatSharpEndToEndTests.ToStringMethods.Color __index12Value;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_b703c826ef6241ea92fb057fdd320a79_Greedy<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {

                tableReader_b703c826ef6241ea92fb057fdd320a79_Greedy<TInputBuffer>? item = new tableReader_b703c826ef6241ea92fb057fdd320a79_Greedy<TInputBuffer>();
                item.Initialize(buffer, offset, remainingDepth);
                return item;

            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_b703c826ef6241ea92fb057fdd320a79_Greedy() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                VTableGeneric.Create<TInputBuffer>(buffer, offset, out var vtable);
                this.__index0Value = ReadIndex0Value(buffer, offset, vtable, remainingDepth);
                this.__index1Value = ReadIndex1Value(buffer, offset, vtable, remainingDepth);
                this.__index2Value = ReadIndex2Value(buffer, offset, vtable, remainingDepth);
                this.__index3Value = ReadIndex3Value(buffer, offset, vtable, remainingDepth);
                this.__index4Value = ReadIndex4Value(buffer, offset, vtable, remainingDepth);
                this.__index6Value = ReadIndex6Value(buffer, offset, vtable, remainingDepth);
                this.__index7Value = ReadIndex7Value(buffer, offset, vtable, remainingDepth);
                this.__index8Value = ReadIndex8Value(buffer, offset, vtable, remainingDepth);
                this.__index10Value = ReadIndex10Value(buffer, offset, vtable, remainingDepth);
                this.__index11Value = ReadIndex11Value(buffer, offset, vtable, remainingDepth);
                this.__index12Value = ReadIndex12Value(buffer, offset, vtable, remainingDepth);
                base.OnFlatSharpDeserialized(__CtorContext);
            }


            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(FlatSharpEndToEndTests.ToStringMethods.Monster);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => null;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => false;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public override FlatSharpEndToEndTests.ToStringMethods.Color Color
#else
            public override FlatSharpEndToEndTests.ToStringMethods.Color Color
#endif
            {
                get
                {
                    return this.__index0Value;
                }

                set
                {
                    global::FlatSharp.Internal.FSThrow.NotMutable();
                }
            }

#if NET7_0_OR_GREATER
            public override System.Nullable<FlatSharpEndToEndTests.ToStringMethods.Vec3> Pos
#else
            public override System.Nullable<FlatSharpEndToEndTests.ToStringMethods.Vec3> Pos
#endif
            {
                get
                {
                    return this.__index1Value;
                }

                set
                {
                    global::FlatSharp.Internal.FSThrow.NotMutable();
                }
            }

#if NET7_0_OR_GREATER
            public override System.Int16 Mana
#else
            public override System.Int16 Mana
#endif
            {
                get
                {
                    return this.__index2Value;
                }

                set
                {
                    global::FlatSharp.Internal.FSThrow.NotMutable();
                }
            }

#if NET7_0_OR_GREATER
            public override System.Int16 HP
#else
            public override System.Int16 HP
#endif
            {
                get
                {
                    return this.__index3Value;
                }

                set
                {
                    global::FlatSharp.Internal.FSThrow.NotMutable();
                }
            }

#if NET7_0_OR_GREATER
            public override System.String? Name
#else
            public override System.String? Name
#endif
            {
                get
                {
                    return this.__index4Value;
                }

                set
                {
                    global::FlatSharp.Internal.FSThrow.NotMutable();
                }
            }

#if NET7_0_OR_GREATER
            public override System.Nullable<System.Memory<System.Byte>> Inventory
#else
            public override System.Nullable<System.Memory<System.Byte>> Inventory
#endif
            {
                get
                {
                    return this.__index6Value;
                }

                set
                {
                    global::FlatSharp.Internal.FSThrow.NotMutable();
                }
            }

#if NET7_0_OR_GREATER
            public override System.Collections.Generic.IList<FlatSharpEndToEndTests.ToStringMethods.Weapon>? Weapons
#else
            public override System.Collections.Generic.IList<FlatSharpEndToEndTests.ToStringMethods.Weapon>? Weapons
#endif
            {
                get
                {
                    return this.__index7Value;
                }

                set
                {
                    global::FlatSharp.Internal.FSThrow.NotMutable();
                }
            }

#if NET7_0_OR_GREATER
            public override System.Nullable<FlatSharpEndToEndTests.ToStringMethods.Equipped> Equipped
#else
            public override System.Nullable<FlatSharpEndToEndTests.ToStringMethods.Equipped> Equipped
#endif
            {
                get
                {
                    return this.__index8Value;
                }

                set
                {
                    global::FlatSharp.Internal.FSThrow.NotMutable();
                }
            }

#if NET7_0_OR_GREATER
            public override System.Collections.Generic.IList<FlatSharpEndToEndTests.ToStringMethods.Vec3>? Path
#else
            public override System.Collections.Generic.IList<FlatSharpEndToEndTests.ToStringMethods.Vec3>? Path
#endif
            {
                get
                {
                    return this.__index10Value;
                }

                set
                {
                    global::FlatSharp.Internal.FSThrow.NotMutable();
                }
            }

#if NET7_0_OR_GREATER
            public override System.Double ManaRegenRate
#else
            public override System.Double ManaRegenRate
#endif
            {
                get
                {
                    return this.__index11Value;
                }

                set
                {
                    global::FlatSharp.Internal.FSThrow.NotMutable();
                }
            }

#if NET7_0_OR_GREATER
            public override FlatSharpEndToEndTests.ToStringMethods.Color SecondaryColor
#else
            public override FlatSharpEndToEndTests.ToStringMethods.Color SecondaryColor
#endif
            {
                get
                {
                    return this.__index12Value;
                }

                set
                {
                    global::FlatSharp.Internal.FSThrow.NotMutable();
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static FlatSharpEndToEndTests.ToStringMethods.Color ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTableGeneric vtable,
                short remainingDepth)
            {


                int absoluteLocation;
                {
                    int relativeOffset = vtable.OffsetOf(buffer, 0);
                    if (relativeOffset == 0)
                    {
                        return default(FlatSharpEndToEndTests.ToStringMethods.Color);
                    }

                    absoluteLocation = offset + relativeOffset;
                }

                return global::FlatSharp.Compiler.Generated.N9ECB557C4088DE7F9A350F3B558CCA88B930AF416282C303F434971E5DB5E0B3.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Nullable<FlatSharpEndToEndTests.ToStringMethods.Vec3> ReadIndex1Value(
                TInputBuffer buffer,
                int offset,
                VTableGeneric vtable,
                short remainingDepth)
            {


                int absoluteLocation;
                {
                    int relativeOffset = vtable.OffsetOf(buffer, 1);
                    if (relativeOffset == 0)
                    {
                        return null;
                    }

                    absoluteLocation = offset + relativeOffset;
                }

                return global::FlatSharp.Compiler.Generated.NCA8F6A43FE1CC3351FF3686403C7DDEED48B67F88229CA34F216E4BF3027DA45.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Int16 ReadIndex2Value(
                TInputBuffer buffer,
                int offset,
                VTableGeneric vtable,
                short remainingDepth)
            {


                int absoluteLocation;
                {
                    int relativeOffset = vtable.OffsetOf(buffer, 2);
                    if (relativeOffset == 0)
                    {
                        return (System.Int16)(150);
                    }

                    absoluteLocation = offset + relativeOffset;
                }

                return global::FlatSharp.Compiler.Generated.N9CBCE75A2BC26BBA2ED1E6F2E5F55E58F4574F2859145403829FFA68EF023193.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Int16 ReadIndex3Value(
                TInputBuffer buffer,
                int offset,
                VTableGeneric vtable,
                short remainingDepth)
            {


                int absoluteLocation;
                {
                    int relativeOffset = vtable.OffsetOf(buffer, 3);
                    if (relativeOffset == 0)
                    {
                        return (System.Int16)(100);
                    }

                    absoluteLocation = offset + relativeOffset;
                }

                return global::FlatSharp.Compiler.Generated.N9CBCE75A2BC26BBA2ED1E6F2E5F55E58F4574F2859145403829FFA68EF023193.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.String? ReadIndex4Value(
                TInputBuffer buffer,
                int offset,
                VTableGeneric vtable,
                short remainingDepth)
            {


                int absoluteLocation;
                {
                    int relativeOffset = vtable.OffsetOf(buffer, 4);
                    if (relativeOffset == 0)
                    {
                        return null;
                    }

                    absoluteLocation = offset + relativeOffset;
                }

                return global::FlatSharp.Compiler.Generated.N713267F71061CB50DD0B6E0459A8B28F01DB10694EEF7B2C6253EFEEF1AAB66E.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Nullable<System.Memory<System.Byte>> ReadIndex6Value(
                TInputBuffer buffer,
                int offset,
                VTableGeneric vtable,
                short remainingDepth)
            {


                int absoluteLocation;
                {
                    int relativeOffset = vtable.OffsetOf(buffer, 6);
                    if (relativeOffset == 0)
                    {
                        return null;
                    }

                    absoluteLocation = offset + relativeOffset;
                }

                return global::FlatSharp.Compiler.Generated.N0518D85C3F33B46F4FC93A2AEFFEEB623E1E41020DA824F42C6FBFDCE3A6235B.Helpers.Parse_Greedy(buffer, absoluteLocation, remainingDepth, tableMetadata_c59363849d00449cb9c532de82f92b8b.Inventory);
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Collections.Generic.IList<FlatSharpEndToEndTests.ToStringMethods.Weapon>? ReadIndex7Value(
                TInputBuffer buffer,
                int offset,
                VTableGeneric vtable,
                short remainingDepth)
            {


                int absoluteLocation;
                {
                    int relativeOffset = vtable.OffsetOf(buffer, 7);
                    if (relativeOffset == 0)
                    {
                        return null;
                    }

                    absoluteLocation = offset + relativeOffset;
                }

                return global::FlatSharp.Compiler.Generated.N213872E2C406FBA9E24DEEC64D5DCFFD8E66AB0AD567B02DDC2265D2A53920B1.Helpers.Parse_Greedy(buffer, absoluteLocation, remainingDepth, tableMetadata_c59363849d00449cb9c532de82f92b8b.Weapons);
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Nullable<FlatSharpEndToEndTests.ToStringMethods.Equipped> ReadIndex8Value(
                TInputBuffer buffer,
                int offset,
                VTableGeneric vtable,
                short remainingDepth)
            {

                bool allZero = true;
                bool anyZero = false;


                int relativeOffset0 = vtable.OffsetOf<TInputBuffer>(buffer, 8);
                bool isZero0 = relativeOffset0 == 0;
                allZero &= isZero0;


                anyZero |= isZero0;


                int relativeOffset1 = vtable.OffsetOf<TInputBuffer>(buffer, 9);
                bool isZero1 = relativeOffset1 == 0;
                allZero &= isZero1;


                anyZero |= isZero1;


                if (allZero)
                {
                    return null;
                }

                if (anyZero)
                {
                    global::FlatSharp.Internal.FSThrow.InvalidData_UnionOnlyPartiallyPresent("FlatSharpEndToEndTests.ToStringMethods.Monster.Equipped");
                }

                var absoluteLocations = (relativeOffset0 + offset, relativeOffset1 + offset);
                return global::FlatSharp.Compiler.Generated.N6E5D813B62B51FDD040B2B7DDAE76B555675A50F4678D4269C28015193948026.Helpers.Parse_Greedy(buffer, ref absoluteLocations, remainingDepth);
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Collections.Generic.IList<FlatSharpEndToEndTests.ToStringMethods.Vec3>? ReadIndex10Value(
                TInputBuffer buffer,
                int offset,
                VTableGeneric vtable,
                short remainingDepth)
            {


                int absoluteLocation;
                {
                    int relativeOffset = vtable.OffsetOf(buffer, 10);
                    if (relativeOffset == 0)
                    {
                        return null;
                    }

                    absoluteLocation = offset + relativeOffset;
                }

                return global::FlatSharp.Compiler.Generated.N60181949019DFA839B0CEF7CACE835F8811DFB03BF821B87F5AD148C3A0CB646.Helpers.Parse_Greedy(buffer, absoluteLocation, remainingDepth, tableMetadata_c59363849d00449cb9c532de82f92b8b.Path);
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Double ReadIndex11Value(
                TInputBuffer buffer,
                int offset,
                VTableGeneric vtable,
                short remainingDepth)
            {


                int absoluteLocation;
                {
                    int relativeOffset = vtable.OffsetOf(buffer, 11);
                    if (relativeOffset == 0)
                    {
                        return default(System.Double);
                    }

                    absoluteLocation = offset + relativeOffset;
                }

                return global::FlatSharp.Compiler.Generated.N69778B0A505EF22DDC87C3C5ACB43FEC37AE9060433697AE39F2F466540F7A19.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static FlatSharpEndToEndTests.ToStringMethods.Color ReadIndex12Value(
                TInputBuffer buffer,
                int offset,
                VTableGeneric vtable,
                short remainingDepth)
            {


                int absoluteLocation;
                {
                    int relativeOffset = vtable.OffsetOf(buffer, 12);
                    if (relativeOffset == 0)
                    {
                        return default(FlatSharpEndToEndTests.ToStringMethods.Color);
                    }

                    absoluteLocation = offset + relativeOffset;
                }

                return global::FlatSharp.Compiler.Generated.N9ECB557C4088DE7F9A350F3B558CCA88B930AF416282C303F434971E5DB5E0B3.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
            }
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.NAF59E17467AA695D5717DF567DBB82D0F54CB812DC4C885E9EA262BDE2F754D4.Helpers.tableReader_b703c826ef6241ea92fb057fdd320a79_GreedyMutable<TInputBuffer> Parse_GreedyMutable<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {

            return tableReader_b703c826ef6241ea92fb057fdd320a79_GreedyMutable<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
        }

        [System.Diagnostics.DebuggerDisplay("GreedyMutable Monster")]
        internal sealed class tableReader_b703c826ef6241ea92fb057fdd320a79_GreedyMutable<TInputBuffer>
            : global::FlatSharpEndToEndTests.ToStringMethods.Monster
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);



            private bool __isRoot;
            private FlatSharpEndToEndTests.ToStringMethods.Color __index0Value;
            private System.Nullable<FlatSharpEndToEndTests.ToStringMethods.Vec3> __index1Value;
            private System.Int16 __index2Value;
            private System.Int16 __index3Value;
            private System.String? __index4Value;
            private System.Nullable<System.Memory<System.Byte>> __index6Value;
            private System.Collections.Generic.IList<FlatSharpEndToEndTests.ToStringMethods.Weapon>? __index7Value;
            private System.Nullable<FlatSharpEndToEndTests.ToStringMethods.Equipped> __index8Value;
            private System.Collections.Generic.IList<FlatSharpEndToEndTests.ToStringMethods.Vec3>? __index10Value;
            private System.Double __index11Value;
            private FlatSharpEndToEndTests.ToStringMethods.Color __index12Value;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_b703c826ef6241ea92fb057fdd320a79_GreedyMutable<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {

                tableReader_b703c826ef6241ea92fb057fdd320a79_GreedyMutable<TInputBuffer>? item = new tableReader_b703c826ef6241ea92fb057fdd320a79_GreedyMutable<TInputBuffer>();
                item.Initialize(buffer, offset, remainingDepth);
                return item;

            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_b703c826ef6241ea92fb057fdd320a79_GreedyMutable() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                VTableGeneric.Create<TInputBuffer>(buffer, offset, out var vtable);
                this.__index0Value = ReadIndex0Value(buffer, offset, vtable, remainingDepth);
                this.__index1Value = ReadIndex1Value(buffer, offset, vtable, remainingDepth);
                this.__index2Value = ReadIndex2Value(buffer, offset, vtable, remainingDepth);
                this.__index3Value = ReadIndex3Value(buffer, offset, vtable, remainingDepth);
                this.__index4Value = ReadIndex4Value(buffer, offset, vtable, remainingDepth);
                this.__index6Value = ReadIndex6Value(buffer, offset, vtable, remainingDepth);
                this.__index7Value = ReadIndex7Value(buffer, offset, vtable, remainingDepth);
                this.__index8Value = ReadIndex8Value(buffer, offset, vtable, remainingDepth);
                this.__index10Value = ReadIndex10Value(buffer, offset, vtable, remainingDepth);
                this.__index11Value = ReadIndex11Value(buffer, offset, vtable, remainingDepth);
                this.__index12Value = ReadIndex12Value(buffer, offset, vtable, remainingDepth);
                base.OnFlatSharpDeserialized(__CtorContext);
            }


            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(FlatSharpEndToEndTests.ToStringMethods.Monster);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => null;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => false;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public override FlatSharpEndToEndTests.ToStringMethods.Color Color
#else
            public override FlatSharpEndToEndTests.ToStringMethods.Color Color
#endif
            {
                get
                {
                    return this.__index0Value;
                }

                set
                {
                    this.__index0Value = value;
                }
            }

#if NET7_0_OR_GREATER
            public override System.Nullable<FlatSharpEndToEndTests.ToStringMethods.Vec3> Pos
#else
            public override System.Nullable<FlatSharpEndToEndTests.ToStringMethods.Vec3> Pos
#endif
            {
                get
                {
                    return this.__index1Value;
                }

                set
                {
                    this.__index1Value = value;
                }
            }

#if NET7_0_OR_GREATER
            public override System.Int16 Mana
#else
            public override System.Int16 Mana
#endif
            {
                get
                {
                    return this.__index2Value;
                }

                set
                {
                    this.__index2Value = value;
                }
            }

#if NET7_0_OR_GREATER
            public override System.Int16 HP
#else
            public override System.Int16 HP
#endif
            {
                get
                {
                    return this.__index3Value;
                }

                set
                {
                    this.__index3Value = value;
                }
            }

#if NET7_0_OR_GREATER
            public override System.String? Name
#else
            public override System.String? Name
#endif
            {
                get
                {
                    return this.__index4Value;
                }

                set
                {
                    this.__index4Value = value;
                }
            }

#if NET7_0_OR_GREATER
            public override System.Nullable<System.Memory<System.Byte>> Inventory
#else
            public override System.Nullable<System.Memory<System.Byte>> Inventory
#endif
            {
                get
                {
                    return this.__index6Value;
                }

                set
                {
                    this.__index6Value = value;
                }
            }

#if NET7_0_OR_GREATER
            public override System.Collections.Generic.IList<FlatSharpEndToEndTests.ToStringMethods.Weapon>? Weapons
#else
            public override System.Collections.Generic.IList<FlatSharpEndToEndTests.ToStringMethods.Weapon>? Weapons
#endif
            {
                get
                {
                    return this.__index7Value;
                }

                set
                {
                    this.__index7Value = value;
                }
            }

#if NET7_0_OR_GREATER
            public override System.Nullable<FlatSharpEndToEndTests.ToStringMethods.Equipped> Equipped
#else
            public override System.Nullable<FlatSharpEndToEndTests.ToStringMethods.Equipped> Equipped
#endif
            {
                get
                {
                    return this.__index8Value;
                }

                set
                {
                    this.__index8Value = value;
                }
            }

#if NET7_0_OR_GREATER
            public override System.Collections.Generic.IList<FlatSharpEndToEndTests.ToStringMethods.Vec3>? Path
#else
            public override System.Collections.Generic.IList<FlatSharpEndToEndTests.ToStringMethods.Vec3>? Path
#endif
            {
                get
                {
                    return this.__index10Value;
                }

                set
                {
                    this.__index10Value = value;
                }
            }

#if NET7_0_OR_GREATER
            public override System.Double ManaRegenRate
#else
            public override System.Double ManaRegenRate
#endif
            {
                get
                {
                    return this.__index11Value;
                }

                set
                {
                    this.__index11Value = value;
                }
            }

#if NET7_0_OR_GREATER
            public override FlatSharpEndToEndTests.ToStringMethods.Color SecondaryColor
#else
            public override FlatSharpEndToEndTests.ToStringMethods.Color SecondaryColor
#endif
            {
                get
                {
                    return this.__index12Value;
                }

                set
                {
                    this.__index12Value = value;
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static FlatSharpEndToEndTests.ToStringMethods.Color ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTableGeneric vtable,
                short remainingDepth)
            {


                int absoluteLocation;
                {
                    int relativeOffset = vtable.OffsetOf(buffer, 0);
                    if (relativeOffset == 0)
                    {
                        return default(FlatSharpEndToEndTests.ToStringMethods.Color);
                    }

                    absoluteLocation = offset + relativeOffset;
                }

                return global::FlatSharp.Compiler.Generated.N9ECB557C4088DE7F9A350F3B558CCA88B930AF416282C303F434971E5DB5E0B3.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Nullable<FlatSharpEndToEndTests.ToStringMethods.Vec3> ReadIndex1Value(
                TInputBuffer buffer,
                int offset,
                VTableGeneric vtable,
                short remainingDepth)
            {


                int absoluteLocation;
                {
                    int relativeOffset = vtable.OffsetOf(buffer, 1);
                    if (relativeOffset == 0)
                    {
                        return null;
                    }

                    absoluteLocation = offset + relativeOffset;
                }

                return global::FlatSharp.Compiler.Generated.NCA8F6A43FE1CC3351FF3686403C7DDEED48B67F88229CA34F216E4BF3027DA45.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Int16 ReadIndex2Value(
                TInputBuffer buffer,
                int offset,
                VTableGeneric vtable,
                short remainingDepth)
            {


                int absoluteLocation;
                {
                    int relativeOffset = vtable.OffsetOf(buffer, 2);
                    if (relativeOffset == 0)
                    {
                        return (System.Int16)(150);
                    }

                    absoluteLocation = offset + relativeOffset;
                }

                return global::FlatSharp.Compiler.Generated.N9CBCE75A2BC26BBA2ED1E6F2E5F55E58F4574F2859145403829FFA68EF023193.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Int16 ReadIndex3Value(
                TInputBuffer buffer,
                int offset,
                VTableGeneric vtable,
                short remainingDepth)
            {


                int absoluteLocation;
                {
                    int relativeOffset = vtable.OffsetOf(buffer, 3);
                    if (relativeOffset == 0)
                    {
                        return (System.Int16)(100);
                    }

                    absoluteLocation = offset + relativeOffset;
                }

                return global::FlatSharp.Compiler.Generated.N9CBCE75A2BC26BBA2ED1E6F2E5F55E58F4574F2859145403829FFA68EF023193.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.String? ReadIndex4Value(
                TInputBuffer buffer,
                int offset,
                VTableGeneric vtable,
                short remainingDepth)
            {


                int absoluteLocation;
                {
                    int relativeOffset = vtable.OffsetOf(buffer, 4);
                    if (relativeOffset == 0)
                    {
                        return null;
                    }

                    absoluteLocation = offset + relativeOffset;
                }

                return global::FlatSharp.Compiler.Generated.N713267F71061CB50DD0B6E0459A8B28F01DB10694EEF7B2C6253EFEEF1AAB66E.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Nullable<System.Memory<System.Byte>> ReadIndex6Value(
                TInputBuffer buffer,
                int offset,
                VTableGeneric vtable,
                short remainingDepth)
            {


                int absoluteLocation;
                {
                    int relativeOffset = vtable.OffsetOf(buffer, 6);
                    if (relativeOffset == 0)
                    {
                        return null;
                    }

                    absoluteLocation = offset + relativeOffset;
                }

                return global::FlatSharp.Compiler.Generated.N0518D85C3F33B46F4FC93A2AEFFEEB623E1E41020DA824F42C6FBFDCE3A6235B.Helpers.Parse_GreedyMutable(buffer, absoluteLocation, remainingDepth, tableMetadata_c59363849d00449cb9c532de82f92b8b.Inventory);
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Collections.Generic.IList<FlatSharpEndToEndTests.ToStringMethods.Weapon>? ReadIndex7Value(
                TInputBuffer buffer,
                int offset,
                VTableGeneric vtable,
                short remainingDepth)
            {


                int absoluteLocation;
                {
                    int relativeOffset = vtable.OffsetOf(buffer, 7);
                    if (relativeOffset == 0)
                    {
                        return null;
                    }

                    absoluteLocation = offset + relativeOffset;
                }

                return global::FlatSharp.Compiler.Generated.N213872E2C406FBA9E24DEEC64D5DCFFD8E66AB0AD567B02DDC2265D2A53920B1.Helpers.Parse_GreedyMutable(buffer, absoluteLocation, remainingDepth, tableMetadata_c59363849d00449cb9c532de82f92b8b.Weapons);
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Nullable<FlatSharpEndToEndTests.ToStringMethods.Equipped> ReadIndex8Value(
                TInputBuffer buffer,
                int offset,
                VTableGeneric vtable,
                short remainingDepth)
            {

                bool allZero = true;
                bool anyZero = false;


                int relativeOffset0 = vtable.OffsetOf<TInputBuffer>(buffer, 8);
                bool isZero0 = relativeOffset0 == 0;
                allZero &= isZero0;


                anyZero |= isZero0;


                int relativeOffset1 = vtable.OffsetOf<TInputBuffer>(buffer, 9);
                bool isZero1 = relativeOffset1 == 0;
                allZero &= isZero1;


                anyZero |= isZero1;


                if (allZero)
                {
                    return null;
                }

                if (anyZero)
                {
                    global::FlatSharp.Internal.FSThrow.InvalidData_UnionOnlyPartiallyPresent("FlatSharpEndToEndTests.ToStringMethods.Monster.Equipped");
                }

                var absoluteLocations = (relativeOffset0 + offset, relativeOffset1 + offset);
                return global::FlatSharp.Compiler.Generated.N6E5D813B62B51FDD040B2B7DDAE76B555675A50F4678D4269C28015193948026.Helpers.Parse_GreedyMutable(buffer, ref absoluteLocations, remainingDepth);
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Collections.Generic.IList<FlatSharpEndToEndTests.ToStringMethods.Vec3>? ReadIndex10Value(
                TInputBuffer buffer,
                int offset,
                VTableGeneric vtable,
                short remainingDepth)
            {


                int absoluteLocation;
                {
                    int relativeOffset = vtable.OffsetOf(buffer, 10);
                    if (relativeOffset == 0)
                    {
                        return null;
                    }

                    absoluteLocation = offset + relativeOffset;
                }

                return global::FlatSharp.Compiler.Generated.N60181949019DFA839B0CEF7CACE835F8811DFB03BF821B87F5AD148C3A0CB646.Helpers.Parse_GreedyMutable(buffer, absoluteLocation, remainingDepth, tableMetadata_c59363849d00449cb9c532de82f92b8b.Path);
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Double ReadIndex11Value(
                TInputBuffer buffer,
                int offset,
                VTableGeneric vtable,
                short remainingDepth)
            {


                int absoluteLocation;
                {
                    int relativeOffset = vtable.OffsetOf(buffer, 11);
                    if (relativeOffset == 0)
                    {
                        return default(System.Double);
                    }

                    absoluteLocation = offset + relativeOffset;
                }

                return global::FlatSharp.Compiler.Generated.N69778B0A505EF22DDC87C3C5ACB43FEC37AE9060433697AE39F2F466540F7A19.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static FlatSharpEndToEndTests.ToStringMethods.Color ReadIndex12Value(
                TInputBuffer buffer,
                int offset,
                VTableGeneric vtable,
                short remainingDepth)
            {


                int absoluteLocation;
                {
                    int relativeOffset = vtable.OffsetOf(buffer, 12);
                    if (relativeOffset == 0)
                    {
                        return default(FlatSharpEndToEndTests.ToStringMethods.Color);
                    }

                    absoluteLocation = offset + relativeOffset;
                }

                return global::FlatSharp.Compiler.Generated.N9ECB557C4088DE7F9A350F3B558CCA88B930AF416282C303F434971E5DB5E0B3.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
            }
        }


        private static class tableMetadata_c59363849d00449cb9c532de82f92b8b
        {

            public static readonly TableFieldContext Color = new TableFieldContext(
                "FlatSharpEndToEndTests.ToStringMethods.Monster.Color",
                false,
                false);

            public static readonly TableFieldContext Pos = new TableFieldContext(
                "FlatSharpEndToEndTests.ToStringMethods.Monster.Pos",
                false,
                false);

            public static readonly TableFieldContext Mana = new TableFieldContext(
                "FlatSharpEndToEndTests.ToStringMethods.Monster.Mana",
                false,
                false);

            public static readonly TableFieldContext HP = new TableFieldContext(
                "FlatSharpEndToEndTests.ToStringMethods.Monster.HP",
                false,
                false);

            public static readonly TableFieldContext Name = new TableFieldContext(
                "FlatSharpEndToEndTests.ToStringMethods.Monster.Name",
                false,
                false);

            public static readonly TableFieldContext Friendly = new TableFieldContext(
                "FlatSharpEndToEndTests.ToStringMethods.Monster.Friendly",
                false,
                false);

            public static readonly TableFieldContext Inventory = new TableFieldContext(
                "FlatSharpEndToEndTests.ToStringMethods.Monster.Inventory",
                false,
                false);

            public static readonly TableFieldContext Weapons = new TableFieldContext(
                "FlatSharpEndToEndTests.ToStringMethods.Monster.Weapons",
                false,
                false);

            public static readonly TableFieldContext Equipped = new TableFieldContext(
                "FlatSharpEndToEndTests.ToStringMethods.Monster.Equipped",
                false,
                false);

            public static readonly TableFieldContext Path = new TableFieldContext(
                "FlatSharpEndToEndTests.ToStringMethods.Monster.Path",
                false,
                false);

            public static readonly TableFieldContext ManaRegenRate = new TableFieldContext(
                "FlatSharpEndToEndTests.ToStringMethods.Monster.ManaRegenRate",
                false,
                false);

            public static readonly TableFieldContext SecondaryColor = new TableFieldContext(
                "FlatSharpEndToEndTests.ToStringMethods.Monster.SecondaryColor",
                false,
                false);
        }

    }
}


namespace FlatSharp.Compiler.Generated.NAF59E17467AA695D5717DF567DBB82D0F54CB812DC4C885E9EA262BDE2F754D4
{
    internal class Serializer : IGeneratedSerializer<global::FlatSharpEndToEndTests.ToStringMethods.Monster>
    {
        // Method generated to help AOT compilers make good decisions about generics.
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public void __AotHelper()
        {
            this.Write<ISpanWriter>(default!, new byte[10], default!, default!);
            this.Write<SpanWriter>(default!, new byte[10], default!, default!);

            this.ParseLazy<IInputBuffer>(default!, default);
            this.ParseLazy<MemoryInputBuffer>(default!, default);
            this.ParseLazy<ReadOnlyMemoryInputBuffer>(default!, default);
            this.ParseLazy<ArrayInputBuffer>(default!, default);
            this.ParseLazy<ArraySegmentInputBuffer>(default!, default);

            this.ParseProgressive<IInputBuffer>(default!, default);
            this.ParseProgressive<MemoryInputBuffer>(default!, default);
            this.ParseProgressive<ReadOnlyMemoryInputBuffer>(default!, default);
            this.ParseProgressive<ArrayInputBuffer>(default!, default);
            this.ParseProgressive<ArraySegmentInputBuffer>(default!, default);

            this.ParseGreedy<IInputBuffer>(default!, default);
            this.ParseGreedy<MemoryInputBuffer>(default!, default);
            this.ParseGreedy<ReadOnlyMemoryInputBuffer>(default!, default);
            this.ParseGreedy<ArrayInputBuffer>(default!, default);
            this.ParseGreedy<ArraySegmentInputBuffer>(default!, default);

            this.ParseGreedyMutable<IInputBuffer>(default!, default);
            this.ParseGreedyMutable<MemoryInputBuffer>(default!, default);
            this.ParseGreedyMutable<ReadOnlyMemoryInputBuffer>(default!, default);
            this.ParseGreedyMutable<ArrayInputBuffer>(default!, default);
            this.ParseGreedyMutable<ArraySegmentInputBuffer>(default!, default);

            global::FlatSharp.Internal.FSThrow.InvalidOperation_AotHelper();
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public Serializer()
        {
            global::FlatSharp.Internal.FlatSharpInternal.AssertFlatSharpRuntimeVersionMatches("7.6.0");
        }


        public void Write<TSpanWriter>(TSpanWriter writer, Span<byte> target, global::FlatSharpEndToEndTests.ToStringMethods.Monster root, SerializationContext context)
            where TSpanWriter : ISpanWriter
        {
            context.Offset = 4;
            global::FlatSharp.Compiler.Generated.NAF59E17467AA695D5717DF567DBB82D0F54CB812DC4C885E9EA262BDE2F754D4.Helpers.Serialize(writer, target, root, 0, context);
        }


        public int GetMaxSize(global::FlatSharpEndToEndTests.ToStringMethods.Monster root)
        {
            int maxSize = 0;

            maxSize += global::FlatSharp.Compiler.Generated.NAF59E17467AA695D5717DF567DBB82D0F54CB812DC4C885E9EA262BDE2F754D4.Helpers.GetMaxSize(root);
            return maxSize;
        }


        public global::FlatSharpEndToEndTests.ToStringMethods.Monster ParseGreedy<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            return global::FlatSharp.Compiler.Generated.NAF59E17467AA695D5717DF567DBB82D0F54CB812DC4C885E9EA262BDE2F754D4.Helpers.Parse_Greedy(buffer, args.Offset, args.DepthLimit);
        }


        public global::FlatSharpEndToEndTests.ToStringMethods.Monster ParseGreedyMutable<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            return global::FlatSharp.Compiler.Generated.NAF59E17467AA695D5717DF567DBB82D0F54CB812DC4C885E9EA262BDE2F754D4.Helpers.Parse_GreedyMutable(buffer, args.Offset, args.DepthLimit);
        }


        public global::FlatSharpEndToEndTests.ToStringMethods.Monster ParseProgressive<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            return global::FlatSharp.Compiler.Generated.NAF59E17467AA695D5717DF567DBB82D0F54CB812DC4C885E9EA262BDE2F754D4.Helpers.Parse_Progressive(buffer, args.Offset, args.DepthLimit);
        }


        public global::FlatSharpEndToEndTests.ToStringMethods.Monster ParseLazy<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            return global::FlatSharp.Compiler.Generated.NAF59E17467AA695D5717DF567DBB82D0F54CB812DC4C885E9EA262BDE2F754D4.Helpers.Parse_Lazy(buffer, args.Offset, args.DepthLimit);
        }

    }
}



namespace FlatSharp.Compiler.Generated.NCA8F6A43FE1CC3351FF3686403C7DDEED48B67F88229CA34F216E4BF3027DA45
{
    // Make sure we can reference the namespace of the type we are using.
    // Ensures that extension methods, etc are available.
    using System;

    internal static class Helpers
    {

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static int GetMaxSize(global::System.Nullable<FlatSharpEndToEndTests.ToStringMethods.Vec3> value)
        {

            if (value.HasValue)
            {
                return global::FlatSharp.Compiler.Generated.ND3FAA03648C03A18D528EE1013A444407DC0CB9DB99EF59147FFFCB26C3E4502.Helpers.GetMaxSize(value.Value);
            }

            return 0;

        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static void Serialize<TSpanWriter>(
            TSpanWriter spanWriter,
            Span<byte> span,
            global::System.Nullable<FlatSharpEndToEndTests.ToStringMethods.Vec3> value,
            int offset

            ) where TSpanWriter : ISpanWriter
        {
            global::FlatSharp.Compiler.Generated.ND3FAA03648C03A18D528EE1013A444407DC0CB9DB99EF59147FFFCB26C3E4502.Helpers.Serialize(spanWriter, span, value!.Value, offset);
        }



        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::System.Nullable<FlatSharpEndToEndTests.ToStringMethods.Vec3> Parse<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {

            return global::FlatSharp.Compiler.Generated.ND3FAA03648C03A18D528EE1013A444407DC0CB9DB99EF59147FFFCB26C3E4502.Helpers.Parse(buffer, offset, remainingDepth);
        }


    }
}




namespace FlatSharp.Compiler.Generated.N1B56312394AAA84E32CA7EDCB7D07A5B2E64E1AF0FB7AF7AC68C941AE6659E72
{
    // Make sure we can reference the namespace of the type we are using.
    // Ensures that extension methods, etc are available.
    using System;

    internal static class Helpers
    {

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static int GetMaxSize(global::System.Boolean value)
        {
            return 1;
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static void Serialize<TSpanWriter>(
            TSpanWriter spanWriter,
            Span<byte> span,
            global::System.Boolean value,
            int offset

            ) where TSpanWriter : ISpanWriter
        {
            spanWriter.WriteBool(span, value, offset);
        }



        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static bool Parse<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {

            return buffer.ReadBool(offset);
        }


    }
}




namespace FlatSharp.Compiler.Generated.N0518D85C3F33B46F4FC93A2AEFFEEB623E1E41020DA824F42C6FBFDCE3A6235B
{
    // Make sure we can reference the namespace of the type we are using.
    // Ensures that extension methods, etc are available.
    using System;

    internal static class Helpers
    {

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static int GetMaxSize(global::System.Nullable<System.Memory<System.Byte>> value)
        {

            if (value.HasValue)
            {
                return global::FlatSharp.Compiler.Generated.N331F001CF321CF11BC240659FDA5763A47292410D345E51BA8E5F3343A16B6FB.Helpers.GetMaxSize(value.Value);
            }

            return 0;

        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static void Serialize<TSpanWriter>(
            TSpanWriter spanWriter,
            Span<byte> span,
            global::System.Nullable<System.Memory<System.Byte>> value,
            int offset
            , SerializationContext context
            ) where TSpanWriter : ISpanWriter
        {
            global::FlatSharp.Compiler.Generated.N331F001CF321CF11BC240659FDA5763A47292410D345E51BA8E5F3343A16B6FB.Helpers.Serialize(spanWriter, span, value!.Value, offset, context);
        }



        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::System.Nullable<System.Memory<System.Byte>> Parse_Lazy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
        {

            return global::FlatSharp.Compiler.Generated.N331F001CF321CF11BC240659FDA5763A47292410D345E51BA8E5F3343A16B6FB.Helpers.Parse_Lazy(buffer, offset, remainingDepth, fieldContext);
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::System.Nullable<System.Memory<System.Byte>> Parse_Progressive<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
        {

            return global::FlatSharp.Compiler.Generated.N331F001CF321CF11BC240659FDA5763A47292410D345E51BA8E5F3343A16B6FB.Helpers.Parse_Progressive(buffer, offset, remainingDepth, fieldContext);
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::System.Nullable<System.Memory<System.Byte>> Parse_Greedy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
        {

            return global::FlatSharp.Compiler.Generated.N331F001CF321CF11BC240659FDA5763A47292410D345E51BA8E5F3343A16B6FB.Helpers.Parse_Greedy(buffer, offset, remainingDepth, fieldContext);
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::System.Nullable<System.Memory<System.Byte>> Parse_GreedyMutable<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
        {

            return global::FlatSharp.Compiler.Generated.N331F001CF321CF11BC240659FDA5763A47292410D345E51BA8E5F3343A16B6FB.Helpers.Parse_GreedyMutable(buffer, offset, remainingDepth, fieldContext);
        }


    }
}




namespace FlatSharp.Compiler.Generated.N213872E2C406FBA9E24DEEC64D5DCFFD8E66AB0AD567B02DDC2265D2A53920B1
{
    // Make sure we can reference the namespace of the type we are using.
    // Ensures that extension methods, etc are available.
    using System.Collections.Generic;

    internal static class Helpers
    {


        internal static int GetMaxSize(global::System.Collections.Generic.IList<FlatSharpEndToEndTests.ToStringMethods.Weapon> value)
        {

            int count = value.Count;
            int runningSum = 14;

            if (value is global::FlatSharpEndToEndTests.ToStringMethods.Weapon[] array)
            {

                int i;
                for (i = 0; i < array.Length; i = unchecked(i + 1))
                {
                    var current = array[i];

                    SerializationHelpers.EnsureNonNull(current);
                    runningSum += global::FlatSharp.Compiler.Generated.NBE8605AB3AB3723C9078C39734BE0AB28ECA11EE3E0C92A5A92FCC8AEC6F3900.Helpers.GetMaxSize(current);
                }
            }
            else if (value is List<global::FlatSharpEndToEndTests.ToStringMethods.Weapon> realList)
            {

                int i;
                for (i = 0; i < realList.Count; i = unchecked(i + 1))
                {
                    var current = realList[i];

                    SerializationHelpers.EnsureNonNull(current);
                    runningSum += global::FlatSharp.Compiler.Generated.NBE8605AB3AB3723C9078C39734BE0AB28ECA11EE3E0C92A5A92FCC8AEC6F3900.Helpers.GetMaxSize(current);
                }
            }
            else
            {

                int i;
                for (i = 0; i < count; i = unchecked(i + 1))
                {
                    var current = value[i];

                    SerializationHelpers.EnsureNonNull(current);
                    runningSum += global::FlatSharp.Compiler.Generated.NBE8605AB3AB3723C9078C39734BE0AB28ECA11EE3E0C92A5A92FCC8AEC6F3900.Helpers.GetMaxSize(current);
                }
            }

            return runningSum;
        }



        internal static void Serialize<TSpanWriter>(
            TSpanWriter spanWriter,
            Span<byte> span,
            global::System.Collections.Generic.IList<FlatSharpEndToEndTests.ToStringMethods.Weapon> value,
            int offset
            , SerializationContext context
            ) where TSpanWriter : ISpanWriter
        {

            int count = value.Count;
            int vectorOffset = context.AllocateVector(4, count, 4);
            spanWriter.WriteUOffset(span, offset, vectorOffset);
            spanWriter.WriteInt(span, count, vectorOffset);
            vectorOffset += sizeof(int);


            if (value is global::FlatSharpEndToEndTests.ToStringMethods.Weapon[] array)
            {

                int i;
                for (i = 0; i < array.Length; i = unchecked(i + 1))
                {
                    var current = array[i];

                    SerializationHelpers.EnsureNonNull(current);
                    global::FlatSharp.Compiler.Generated.NBE8605AB3AB3723C9078C39734BE0AB28ECA11EE3E0C92A5A92FCC8AEC6F3900.Helpers.Serialize(spanWriter, span, current, vectorOffset, context);
                    vectorOffset += 4;
                }
            }
            else if (value is List<global::FlatSharpEndToEndTests.ToStringMethods.Weapon> realList)
            {

                int i;
                for (i = 0; i < realList.Count; i = unchecked(i + 1))
                {
                    var current = realList[i];

                    SerializationHelpers.EnsureNonNull(current);
                    global::FlatSharp.Compiler.Generated.NBE8605AB3AB3723C9078C39734BE0AB28ECA11EE3E0C92A5A92FCC8AEC6F3900.Helpers.Serialize(spanWriter, span, current, vectorOffset, context);
                    vectorOffset += 4;
                }
            }
            else
            {

                int i;
                for (i = 0; i < count; i = unchecked(i + 1))
                {
                    var current = value[i];

                    SerializationHelpers.EnsureNonNull(current);
                    global::FlatSharp.Compiler.Generated.NBE8605AB3AB3723C9078C39734BE0AB28ECA11EE3E0C92A5A92FCC8AEC6F3900.Helpers.Serialize(spanWriter, span, current, vectorOffset, context);
                    vectorOffset += 4;
                }
            }
        }



        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::System.Collections.Generic.IList<FlatSharpEndToEndTests.ToStringMethods.Weapon> Parse_Lazy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
        {

            return GeneratedVector_e345f488fa8b1b1c8dbd8893ae1974bd_Lazy<TInputBuffer>.GetOrCreate(
                buffer,
                offset + buffer.ReadUOffset(offset),
                remainingDepth,
                fieldContext);
        }
        [System.Diagnostics.DebuggerDisplay("Lazy [ Weapon ], Count = {Count}")]
        internal sealed class GeneratedVector_e345f488fa8b1b1c8dbd8893ae1974bd_Lazy<TInputBuffer>
            : object
            , IList<global::FlatSharpEndToEndTests.ToStringMethods.Weapon>
            , IReadOnlyList<global::FlatSharpEndToEndTests.ToStringMethods.Weapon>
            , IFlatBufferDeserializedVector
            , IPoolableObject
            where TInputBuffer : IInputBuffer
        {
            private int offset;
            private int count;
            private TInputBuffer buffer;
            private TableFieldContext fieldContext;
            private short remainingDepth;

            private int inUse = 1;

#pragma warning disable CS8618
            private GeneratedVector_e345f488fa8b1b1c8dbd8893ae1974bd_Lazy() { }
#pragma warning restore CS8618

            public static GeneratedVector_e345f488fa8b1b1c8dbd8893ae1974bd_Lazy<TInputBuffer> GetOrCreate(
                TInputBuffer memory,
                int offset,
                short remainingDepth,
                TableFieldContext fieldContext)
            {
                if (!ObjectPool.TryGet<GeneratedVector_e345f488fa8b1b1c8dbd8893ae1974bd_Lazy<TInputBuffer>>(out var item))
                {
                    item = new GeneratedVector_e345f488fa8b1b1c8dbd8893ae1974bd_Lazy<TInputBuffer>();
                }

                item.count = (int)memory.ReadUInt(offset);
                item.offset = offset + sizeof(uint);
                item.buffer = memory;
                item.fieldContext = fieldContext;
                item.remainingDepth = remainingDepth;

                item.inUse = 1;

                return item;
            }

            public global::FlatSharpEndToEndTests.ToStringMethods.Weapon this[int index]
            {
                get => this.SafeParseItem(index);
                set
                {
                    VectorUtilities.CheckIndex(index, this.count);
                    this.UnsafeWriteThrough(index, value);
                }
            }

            public int Count => this.count;

            public FlatBufferDeserializationOption DeserializationOption => FlatBufferDeserializationOption.Lazy;


            public void ReturnToPool(bool force = false)
            {
                if (this.DeserializationOption.ShouldReturnToPool(force))
                {
                    if (System.Threading.Interlocked.Exchange(ref inUse, 0) == 1)
                    {
                        this.count = -1;
                        this.offset = -1;

                        this.buffer = default(TInputBuffer)!;
                        this.fieldContext = null!;
                        this.remainingDepth = -1;

                        ObjectPool.Return(this);
                    }
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private FlatSharp.Compiler.Generated.NBE8605AB3AB3723C9078C39734BE0AB28ECA11EE3E0C92A5A92FCC8AEC6F3900.Helpers.tableReader_ce4756c340f64635850a581f5b3051fc_Lazy<TInputBuffer> SafeParseItem(int index)
            {
                VectorUtilities.CheckIndex(index, this.count);
                return this.UnsafeParseItem(index);
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private FlatSharp.Compiler.Generated.NBE8605AB3AB3723C9078C39734BE0AB28ECA11EE3E0C92A5A92FCC8AEC6F3900.Helpers.tableReader_ce4756c340f64635850a581f5b3051fc_Lazy<TInputBuffer> UnsafeParseItem(int index)
            {
                int offset = this.offset + (checked(index << 2));
                return global::FlatSharp.Compiler.Generated.NBE8605AB3AB3723C9078C39734BE0AB28ECA11EE3E0C92A5A92FCC8AEC6F3900.Helpers.Parse_Lazy(buffer, offset, remainingDepth);
            }


            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private void UnsafeWriteThrough(int index, global::FlatSharpEndToEndTests.ToStringMethods.Weapon value)
            {
                global::FlatSharp.Internal.FSThrow.NotMutable_DeserializedVector();
            }
            public bool Contains(global::FlatSharpEndToEndTests.ToStringMethods.Weapon? item)
        => global::FlatSharp.Internal.VectorsCommon.Contains(this, item);

            public int IndexOf(global::FlatSharpEndToEndTests.ToStringMethods.Weapon? item)
                => global::FlatSharp.Internal.VectorsCommon.IndexOf(this, item);

            public void CopyTo(global::FlatSharpEndToEndTests.ToStringMethods.Weapon[]? array, int arrayIndex)
                => global::FlatSharp.Internal.VectorsCommon.CopyTo(this, array, arrayIndex);

            public IEnumerator<global::FlatSharpEndToEndTests.ToStringMethods.Weapon> GetEnumerator()
                => global::FlatSharp.Internal.VectorsCommon.GetEnumerator(this);

            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => this.GetEnumerator();
            public bool IsReadOnly => true;

            public void Add(global::FlatSharpEndToEndTests.ToStringMethods.Weapon item) => global::FlatSharp.Internal.FSThrow.NotMutable_DeserializedVector();
            public void Clear() => global::FlatSharp.Internal.FSThrow.NotMutable_DeserializedVector();
            public void Insert(int index, global::FlatSharpEndToEndTests.ToStringMethods.Weapon item) => global::FlatSharp.Internal.FSThrow.NotMutable_DeserializedVector();
            public void RemoveAt(int index) => global::FlatSharp.Internal.FSThrow.NotMutable_DeserializedVector();
            public bool Remove(global::FlatSharpEndToEndTests.ToStringMethods.Weapon item) => global::FlatSharp.Internal.FSThrow.NotMutable_DeserializedVector();
            IInputBuffer IFlatBufferDeserializedVector.InputBuffer => this.buffer;

            int IFlatBufferDeserializedVector.ItemSize => 4;

            int IFlatBufferDeserializedVector.OffsetBase => this.offset;

            object IFlatBufferDeserializedVector.ItemAt(int index) => this.SafeParseItem(index)!;

            int IFlatBufferDeserializedVector.OffsetOf(int index)
            {
                VectorUtilities.CheckIndex(index, this.Count);
                return this.offset + (checked(index << 2));
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::System.Collections.Generic.IList<FlatSharpEndToEndTests.ToStringMethods.Weapon> Parse_Progressive<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
        {

            return GeneratedVector_e345f488fa8b1b1c8dbd8893ae1974bd_Progressive<TInputBuffer>.GetOrCreate(
                buffer,
                offset + buffer.ReadUOffset(offset),
                remainingDepth,
                fieldContext);
        }
        [System.Diagnostics.DebuggerDisplay("Progressive [ Weapon ], Count = {Count}")]
        internal sealed class GeneratedVector_e345f488fa8b1b1c8dbd8893ae1974bd_Progressive<TInputBuffer>
            : object
            , IList<global::FlatSharpEndToEndTests.ToStringMethods.Weapon>
            , IReadOnlyList<global::FlatSharpEndToEndTests.ToStringMethods.Weapon>
            , IFlatBufferDeserializedVector
            , IPoolableObject
            where TInputBuffer : IInputBuffer
        {
            private const uint ChunkSize = 32;

            private int offset;
            private int count;
            private TInputBuffer buffer;
            private TableFieldContext fieldContext;
            private short remainingDepth;
            private FlatSharp.Compiler.Generated.NBE8605AB3AB3723C9078C39734BE0AB28ECA11EE3E0C92A5A92FCC8AEC6F3900.Helpers.tableReader_ce4756c340f64635850a581f5b3051fc_Progressive<TInputBuffer>?[]?[] items;
            private int inUse = 1;

#pragma warning disable CS8618
            private GeneratedVector_e345f488fa8b1b1c8dbd8893ae1974bd_Progressive() { }
#pragma warning restore CS8618

            public static GeneratedVector_e345f488fa8b1b1c8dbd8893ae1974bd_Progressive<TInputBuffer> GetOrCreate(
                TInputBuffer memory,
                int offset,
                short remainingDepth,
                TableFieldContext fieldContext)
            {
                if (!ObjectPool.TryGet<GeneratedVector_e345f488fa8b1b1c8dbd8893ae1974bd_Progressive<TInputBuffer>>(out var item))
                {
                    item = new GeneratedVector_e345f488fa8b1b1c8dbd8893ae1974bd_Progressive<TInputBuffer>();
                }

                item.count = (int)memory.ReadUInt(offset);
                item.offset = offset + sizeof(uint);
                item.buffer = memory;
                item.fieldContext = fieldContext;
                item.remainingDepth = remainingDepth;


                int progressiveMinLength = (int)(item.count / ChunkSize) + 1;
                item.items = System.Buffers.ArrayPool<FlatSharp.Compiler.Generated.NBE8605AB3AB3723C9078C39734BE0AB28ECA11EE3E0C92A5A92FCC8AEC6F3900.Helpers.tableReader_ce4756c340f64635850a581f5b3051fc_Progressive<TInputBuffer>?[]?>.Shared.Rent(progressiveMinLength);
                item.inUse = 1;

                return item;
            }

            public global::FlatSharpEndToEndTests.ToStringMethods.Weapon this[int index]
            {
                get => this.ProgressiveGet(index);
                set => this.ProgressiveSet(index, value);
            }

            public int Count => this.count;

            public FlatBufferDeserializationOption DeserializationOption => FlatBufferDeserializationOption.Progressive;


            public void ReturnToPool(bool force = false)
            {
                if (this.DeserializationOption.ShouldReturnToPool(force))
                {
                    if (System.Threading.Interlocked.Exchange(ref inUse, 0) == 1)
                    {
                        this.count = -1;
                        this.offset = -1;

                        this.buffer = default(TInputBuffer)!;
                        this.fieldContext = null!;
                        this.remainingDepth = -1;

                        var items = this.items;
                        this.items = null!;

                        if (items is null)
                        {
                            return;
                        }

                        for (int i = 0; i < items.Length; ++i)
                        {
                            var block = items[i];

                            if (block is null)
                            {
                                continue;
                            }



                            System.Buffers.ArrayPool<FlatSharp.Compiler.Generated.NBE8605AB3AB3723C9078C39734BE0AB28ECA11EE3E0C92A5A92FCC8AEC6F3900.Helpers.tableReader_ce4756c340f64635850a581f5b3051fc_Progressive<TInputBuffer>?>.Shared.Return(block, true);
                            items[i] = null;
                        }

                        System.Buffers.ArrayPool<FlatSharp.Compiler.Generated.NBE8605AB3AB3723C9078C39734BE0AB28ECA11EE3E0C92A5A92FCC8AEC6F3900.Helpers.tableReader_ce4756c340f64635850a581f5b3051fc_Progressive<TInputBuffer>?[]?>.Shared.Return(items);
                        ObjectPool.Return(this);
                    }
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static void GetAddress(uint index, out uint rowIndex, out uint colIndex)
            {
                rowIndex = index / ChunkSize;
                colIndex = index % ChunkSize;
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private FlatSharp.Compiler.Generated.NBE8605AB3AB3723C9078C39734BE0AB28ECA11EE3E0C92A5A92FCC8AEC6F3900.Helpers.tableReader_ce4756c340f64635850a581f5b3051fc_Progressive<TInputBuffer>?[] GetOrCreateRow(FlatSharp.Compiler.Generated.NBE8605AB3AB3723C9078C39734BE0AB28ECA11EE3E0C92A5A92FCC8AEC6F3900.Helpers.tableReader_ce4756c340f64635850a581f5b3051fc_Progressive<TInputBuffer>?[]?[] items, uint rowIndex)
            {
                return items[rowIndex] ?? this.CreateRow(items, rowIndex);
            }

            [MethodImpl(MethodImplOptions.NoInlining)]
            private FlatSharp.Compiler.Generated.NBE8605AB3AB3723C9078C39734BE0AB28ECA11EE3E0C92A5A92FCC8AEC6F3900.Helpers.tableReader_ce4756c340f64635850a581f5b3051fc_Progressive<TInputBuffer>?[] CreateRow(FlatSharp.Compiler.Generated.NBE8605AB3AB3723C9078C39734BE0AB28ECA11EE3E0C92A5A92FCC8AEC6F3900.Helpers.tableReader_ce4756c340f64635850a581f5b3051fc_Progressive<TInputBuffer>?[]?[] items, uint rowIndex)
            {
                var row = System.Buffers.ArrayPool<FlatSharp.Compiler.Generated.NBE8605AB3AB3723C9078C39734BE0AB28ECA11EE3E0C92A5A92FCC8AEC6F3900.Helpers.tableReader_ce4756c340f64635850a581f5b3051fc_Progressive<TInputBuffer>?>.Shared.Rent((int)ChunkSize);
                items[rowIndex] = row;



                return row;
            }

            private FlatSharp.Compiler.Generated.NBE8605AB3AB3723C9078C39734BE0AB28ECA11EE3E0C92A5A92FCC8AEC6F3900.Helpers.tableReader_ce4756c340f64635850a581f5b3051fc_Progressive<TInputBuffer> ProgressiveGet(int index)
            {
                VectorUtilities.CheckIndex(index, this.count);

                uint uindex = unchecked((uint)index);
                GetAddress(uindex, out uint rowIndex, out uint colIndex);

                var items = this.items;
                var row = this.GetOrCreateRow(items, rowIndex);
                var item = row[colIndex];

                if (item is null)
                {
                    item = this.UnsafeParseItem(index);
                    row[colIndex] = item;
                }

                return item!;
            }

            private void ProgressiveSet(int index, global::FlatSharpEndToEndTests.ToStringMethods.Weapon value) => this.InlineProgressiveSet(index, value);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private void InlineProgressiveSet(int index, global::FlatSharpEndToEndTests.ToStringMethods.Weapon value)
            {
                VectorUtilities.CheckIndex(index, this.count);

                this.UnsafeWriteThrough(index, value);
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private FlatSharp.Compiler.Generated.NBE8605AB3AB3723C9078C39734BE0AB28ECA11EE3E0C92A5A92FCC8AEC6F3900.Helpers.tableReader_ce4756c340f64635850a581f5b3051fc_Progressive<TInputBuffer> UnsafeParseItem(int index)
            {
                int offset = this.offset + (checked(index << 2));
                return UnsafeParseFromOffset(offset);
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private FlatSharp.Compiler.Generated.NBE8605AB3AB3723C9078C39734BE0AB28ECA11EE3E0C92A5A92FCC8AEC6F3900.Helpers.tableReader_ce4756c340f64635850a581f5b3051fc_Progressive<TInputBuffer> UnsafeParseFromOffset(int offset)
            {
                return global::FlatSharp.Compiler.Generated.NBE8605AB3AB3723C9078C39734BE0AB28ECA11EE3E0C92A5A92FCC8AEC6F3900.Helpers.Parse_Progressive(buffer, offset, remainingDepth);
            }


            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private void UnsafeWriteThrough(int index, global::FlatSharpEndToEndTests.ToStringMethods.Weapon value)
            {
                global::FlatSharp.Internal.FSThrow.NotMutable_DeserializedVector();
            }
            public bool Contains(global::FlatSharpEndToEndTests.ToStringMethods.Weapon? item)
        => global::FlatSharp.Internal.VectorsCommon.Contains(this, item);

            public int IndexOf(global::FlatSharpEndToEndTests.ToStringMethods.Weapon? item)
                => global::FlatSharp.Internal.VectorsCommon.IndexOf(this, item);

            public void CopyTo(global::FlatSharpEndToEndTests.ToStringMethods.Weapon[]? array, int arrayIndex)
                => global::FlatSharp.Internal.VectorsCommon.CopyTo(this, array, arrayIndex);

            public IEnumerator<global::FlatSharpEndToEndTests.ToStringMethods.Weapon> GetEnumerator()
                => global::FlatSharp.Internal.VectorsCommon.GetEnumerator(this);

            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => this.GetEnumerator();
            public bool IsReadOnly => true;

            public void Add(global::FlatSharpEndToEndTests.ToStringMethods.Weapon item) => global::FlatSharp.Internal.FSThrow.NotMutable_DeserializedVector();
            public void Clear() => global::FlatSharp.Internal.FSThrow.NotMutable_DeserializedVector();
            public void Insert(int index, global::FlatSharpEndToEndTests.ToStringMethods.Weapon item) => global::FlatSharp.Internal.FSThrow.NotMutable_DeserializedVector();
            public void RemoveAt(int index) => global::FlatSharp.Internal.FSThrow.NotMutable_DeserializedVector();
            public bool Remove(global::FlatSharpEndToEndTests.ToStringMethods.Weapon item) => global::FlatSharp.Internal.FSThrow.NotMutable_DeserializedVector();
            IInputBuffer IFlatBufferDeserializedVector.InputBuffer => this.buffer;

            int IFlatBufferDeserializedVector.ItemSize => 4;

            int IFlatBufferDeserializedVector.OffsetBase => this.offset;

            object IFlatBufferDeserializedVector.ItemAt(int index) => this.ProgressiveGet(index)!;

            int IFlatBufferDeserializedVector.OffsetOf(int index)
            {
                VectorUtilities.CheckIndex(index, this.Count);
                return this.offset + (checked(index << 2));
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::System.Collections.Generic.IList<FlatSharpEndToEndTests.ToStringMethods.Weapon> Parse_Greedy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
        {

            return GeneratedVector_e345f488fa8b1b1c8dbd8893ae1974bd_Greedy<TInputBuffer>.GetOrCreate(
                buffer,
                offset + buffer.ReadUOffset(offset),
                remainingDepth,
                fieldContext);
        }
        [System.Diagnostics.DebuggerDisplay("Greedy [ Weapon ], Count = {Count}")]
        internal sealed class GeneratedVector_e345f488fa8b1b1c8dbd8893ae1974bd_Greedy<TInputBuffer>
            : object
            , IList<global::FlatSharpEndToEndTests.ToStringMethods.Weapon>
            , IReadOnlyList<global::FlatSharpEndToEndTests.ToStringMethods.Weapon>
            , IPoolableObject
            where TInputBuffer : IInputBuffer
        {
            private readonly List<FlatSharp.Compiler.Generated.NBE8605AB3AB3723C9078C39734BE0AB28ECA11EE3E0C92A5A92FCC8AEC6F3900.Helpers.tableReader_ce4756c340f64635850a581f5b3051fc_Greedy<TInputBuffer>> list;
            private int inUse = 1;

            private GeneratedVector_e345f488fa8b1b1c8dbd8893ae1974bd_Greedy(int count)
            {
                this.list = new List<FlatSharp.Compiler.Generated.NBE8605AB3AB3723C9078C39734BE0AB28ECA11EE3E0C92A5A92FCC8AEC6F3900.Helpers.tableReader_ce4756c340f64635850a581f5b3051fc_Greedy<TInputBuffer>>(count);
            }

            public static GeneratedVector_e345f488fa8b1b1c8dbd8893ae1974bd_Greedy<TInputBuffer> GetOrCreate(
                TInputBuffer buffer,
                int offset,
                short remainingDepth,
                TableFieldContext fieldContext)
            {
                int count = (int)buffer.ReadUInt(offset);
                offset += sizeof(int);

                if (ObjectPool.TryGet(out GeneratedVector_e345f488fa8b1b1c8dbd8893ae1974bd_Greedy<TInputBuffer>? list))

                {
#if NET6_0_OR_GREATER
                
                list.list.EnsureCapacity(count);
#endif
                }
                else
                {
                    list = new GeneratedVector_e345f488fa8b1b1c8dbd8893ae1974bd_Greedy<TInputBuffer>(count);
                }

                var innerList = list.list;
                for (int i = 0; i < count; ++i)
                {
                    var item = global::FlatSharp.Compiler.Generated.NBE8605AB3AB3723C9078C39734BE0AB28ECA11EE3E0C92A5A92FCC8AEC6F3900.Helpers.Parse_Greedy(buffer, offset, remainingDepth);
                    innerList.Add(item);
                    offset += 4;
                }

                list.inUse = 1;

                return list;
            }


            public void ReturnToPool(bool force)
            {
                if (force)
                {
                    if (System.Threading.Interlocked.Exchange(ref this.inUse, 0) != 0)
                    {


                        this.list.Clear();
                        ObjectPool.Return(this);
                    }
                }
            }

            public global::FlatSharpEndToEndTests.ToStringMethods.Weapon this[int index]
            {
                get => this.GetItem(index);
                set => this.SetItem(index, value);
            }

            public int Count => this.list.Count;

            public FlatBufferDeserializationOption DeserializationOption => FlatBufferDeserializationOption.Greedy;

            private FlatSharp.Compiler.Generated.NBE8605AB3AB3723C9078C39734BE0AB28ECA11EE3E0C92A5A92FCC8AEC6F3900.Helpers.tableReader_ce4756c340f64635850a581f5b3051fc_Greedy<TInputBuffer> GetItem(int index) => this.list[index];
            private void SetItem(int index, global::FlatSharpEndToEndTests.ToStringMethods.Weapon value) => global::FlatSharp.Internal.FSThrow.NotMutable_DeserializedVector();

            public bool Contains(global::FlatSharpEndToEndTests.ToStringMethods.Weapon? item)
        => global::FlatSharp.Internal.VectorsCommon.Contains(this, item);

            public int IndexOf(global::FlatSharpEndToEndTests.ToStringMethods.Weapon? item)
                => global::FlatSharp.Internal.VectorsCommon.IndexOf(this, item);

            public void CopyTo(global::FlatSharpEndToEndTests.ToStringMethods.Weapon[]? array, int arrayIndex)
                => global::FlatSharp.Internal.VectorsCommon.CopyTo(this, array, arrayIndex);

            public IEnumerator<global::FlatSharpEndToEndTests.ToStringMethods.Weapon> GetEnumerator()
                => global::FlatSharp.Internal.VectorsCommon.GetEnumerator(this);

            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => this.GetEnumerator();
            public bool IsReadOnly => true;

            public void Add(global::FlatSharpEndToEndTests.ToStringMethods.Weapon item) => global::FlatSharp.Internal.FSThrow.NotMutable_DeserializedVector();
            public void Clear() => global::FlatSharp.Internal.FSThrow.NotMutable_DeserializedVector();
            public void Insert(int index, global::FlatSharpEndToEndTests.ToStringMethods.Weapon item) => global::FlatSharp.Internal.FSThrow.NotMutable_DeserializedVector();
            public void RemoveAt(int index) => global::FlatSharp.Internal.FSThrow.NotMutable_DeserializedVector();
            public bool Remove(global::FlatSharpEndToEndTests.ToStringMethods.Weapon item) => global::FlatSharp.Internal.FSThrow.NotMutable_DeserializedVector();
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::System.Collections.Generic.IList<FlatSharpEndToEndTests.ToStringMethods.Weapon> Parse_GreedyMutable<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
        {

            return GeneratedVector_e345f488fa8b1b1c8dbd8893ae1974bd_GreedyMutable<TInputBuffer>.GetOrCreate(
                buffer,
                offset + buffer.ReadUOffset(offset),
                remainingDepth,
                fieldContext);
        }
        [System.Diagnostics.DebuggerDisplay("GreedyMutable [ Weapon ], Count = {Count}")]
        internal sealed class GeneratedVector_e345f488fa8b1b1c8dbd8893ae1974bd_GreedyMutable<TInputBuffer>
            : object
            , IList<global::FlatSharpEndToEndTests.ToStringMethods.Weapon>
            , IReadOnlyList<global::FlatSharpEndToEndTests.ToStringMethods.Weapon>
            , IPoolableObject
            where TInputBuffer : IInputBuffer
        {
            private TableFieldContext fieldContext;
            private readonly List<global::FlatSharpEndToEndTests.ToStringMethods.Weapon> list;
            private int inUse = 1;

#pragma warning disable CS8618
            private GeneratedVector_e345f488fa8b1b1c8dbd8893ae1974bd_GreedyMutable(int count)
            {
                this.list = new List<global::FlatSharpEndToEndTests.ToStringMethods.Weapon>(count);
            }
#pragma warning restore CS8618

            public static GeneratedVector_e345f488fa8b1b1c8dbd8893ae1974bd_GreedyMutable<TInputBuffer> GetOrCreate(
                TInputBuffer buffer,
                int offset,
                short remainingDepth,
                TableFieldContext fieldContext)
            {
                int count = (int)buffer.ReadUInt(offset);
                offset += sizeof(int);

                if (ObjectPool.TryGet(out GeneratedVector_e345f488fa8b1b1c8dbd8893ae1974bd_GreedyMutable<TInputBuffer>? list))

                {
#if NET6_0_OR_GREATER
                
                list.list.EnsureCapacity(count);
#endif
                }
                else
                {
                    list = new GeneratedVector_e345f488fa8b1b1c8dbd8893ae1974bd_GreedyMutable<TInputBuffer>(count);
                }

                var innerList = list.list;
                for (int i = 0; i < count; ++i)
                {
                    var item = global::FlatSharp.Compiler.Generated.NBE8605AB3AB3723C9078C39734BE0AB28ECA11EE3E0C92A5A92FCC8AEC6F3900.Helpers.Parse_GreedyMutable(buffer, offset, remainingDepth);
                    innerList.Add(item);
                    offset += 4;
                }

                list.fieldContext = fieldContext;
                list.inUse = 1;

                return list;
            }


            public void ReturnToPool(bool force)
            {
                if (force)
                {
                    if (System.Threading.Interlocked.Exchange(ref this.inUse, 0) != 0)
                    {


                        this.list.Clear();
                        ObjectPool.Return(this);
                    }
                }
            }

            public global::FlatSharpEndToEndTests.ToStringMethods.Weapon this[int index]
            {
                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                get => this.GetItem(index);

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                set => this.SetItem(index, value);
            }

            public int Count => this.list.Count;

            public bool IsReadOnly => false;

            public FlatBufferDeserializationOption DeserializationOption => FlatBufferDeserializationOption.GreedyMutable;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private global::FlatSharpEndToEndTests.ToStringMethods.Weapon GetItem(int index) => this.list[index];

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private void SetItem(int index, global::FlatSharpEndToEndTests.ToStringMethods.Weapon value)
            {
                this.list[index] = value;
            }

            public void Add(global::FlatSharpEndToEndTests.ToStringMethods.Weapon item)
            {
                this.list.Add(item);
            }

            public void Clear()
            {
                this.list.Clear();
            }

            public void Insert(int index, global::FlatSharpEndToEndTests.ToStringMethods.Weapon item)
            {
                this.list.Insert(index, item);
            }

            public void RemoveAt(int index)
            {
                this.list.RemoveAt(index);
            }

            public bool Remove(global::FlatSharpEndToEndTests.ToStringMethods.Weapon item)
            {
                return this.list.Remove(item);
            }

            public bool Contains(global::FlatSharpEndToEndTests.ToStringMethods.Weapon? item)
        => global::FlatSharp.Internal.VectorsCommon.Contains(this, item);

            public int IndexOf(global::FlatSharpEndToEndTests.ToStringMethods.Weapon? item)
                => global::FlatSharp.Internal.VectorsCommon.IndexOf(this, item);

            public void CopyTo(global::FlatSharpEndToEndTests.ToStringMethods.Weapon[]? array, int arrayIndex)
                => global::FlatSharp.Internal.VectorsCommon.CopyTo(this, array, arrayIndex);

            public IEnumerator<global::FlatSharpEndToEndTests.ToStringMethods.Weapon> GetEnumerator()
                => global::FlatSharp.Internal.VectorsCommon.GetEnumerator(this);

            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => this.GetEnumerator();
        }

    }
}




namespace FlatSharp.Compiler.Generated.N6E5D813B62B51FDD040B2B7DDAE76B555675A50F4678D4269C28015193948026
{
    // Make sure we can reference the namespace of the type we are using.
    // Ensures that extension methods, etc are available.
    using System;

    internal static class Helpers
    {

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static int GetMaxSize(global::System.Nullable<FlatSharpEndToEndTests.ToStringMethods.Equipped> value)
        {

            if (value.HasValue)
            {
                return global::FlatSharp.Compiler.Generated.NAAE483ADA41F1B15A6AF51A1A02EC342D327CE9F1FC93B8D548C995BE5118168.Helpers.GetMaxSize(value.Value);
            }

            return 0;

        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static void Serialize<TSpanWriter>(
            TSpanWriter spanWriter,
            Span<byte> span,
            global::System.Nullable<FlatSharpEndToEndTests.ToStringMethods.Equipped> value,
            ref (int offset0, int offset1) offset
            , SerializationContext context
            , TableFieldContext fieldContext) where TSpanWriter : ISpanWriter
        {
            global::FlatSharp.Compiler.Generated.NAAE483ADA41F1B15A6AF51A1A02EC342D327CE9F1FC93B8D548C995BE5118168.Helpers.Serialize(spanWriter, span, value!.Value, ref offset, context, fieldContext);
        }



        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::System.Nullable<FlatSharpEndToEndTests.ToStringMethods.Equipped> Parse_Lazy<TInputBuffer>(
            TInputBuffer buffer,
            ref (int offset0, int offset1) offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {

            return global::FlatSharp.Compiler.Generated.NAAE483ADA41F1B15A6AF51A1A02EC342D327CE9F1FC93B8D548C995BE5118168.Helpers.Parse_Lazy(buffer, ref offset, remainingDepth);
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::System.Nullable<FlatSharpEndToEndTests.ToStringMethods.Equipped> Parse_Progressive<TInputBuffer>(
            TInputBuffer buffer,
            ref (int offset0, int offset1) offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {

            return global::FlatSharp.Compiler.Generated.NAAE483ADA41F1B15A6AF51A1A02EC342D327CE9F1FC93B8D548C995BE5118168.Helpers.Parse_Progressive(buffer, ref offset, remainingDepth);
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::System.Nullable<FlatSharpEndToEndTests.ToStringMethods.Equipped> Parse_Greedy<TInputBuffer>(
            TInputBuffer buffer,
            ref (int offset0, int offset1) offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {

            return global::FlatSharp.Compiler.Generated.NAAE483ADA41F1B15A6AF51A1A02EC342D327CE9F1FC93B8D548C995BE5118168.Helpers.Parse_Greedy(buffer, ref offset, remainingDepth);
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::System.Nullable<FlatSharpEndToEndTests.ToStringMethods.Equipped> Parse_GreedyMutable<TInputBuffer>(
            TInputBuffer buffer,
            ref (int offset0, int offset1) offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {

            return global::FlatSharp.Compiler.Generated.NAAE483ADA41F1B15A6AF51A1A02EC342D327CE9F1FC93B8D548C995BE5118168.Helpers.Parse_GreedyMutable(buffer, ref offset, remainingDepth);
        }


    }
}




namespace FlatSharp.Compiler.Generated.N60181949019DFA839B0CEF7CACE835F8811DFB03BF821B87F5AD148C3A0CB646
{
    // Make sure we can reference the namespace of the type we are using.
    // Ensures that extension methods, etc are available.
    using System.Collections.Generic;

    internal static class Helpers
    {


        internal static int GetMaxSize(global::System.Collections.Generic.IList<FlatSharpEndToEndTests.ToStringMethods.Vec3> value)
        {
            return 10 + (checked(12 * value.Count));
        }



        internal static void Serialize<TSpanWriter>(
            TSpanWriter spanWriter,
            Span<byte> span,
            global::System.Collections.Generic.IList<FlatSharpEndToEndTests.ToStringMethods.Vec3> value,
            int offset
            , SerializationContext context
            ) where TSpanWriter : ISpanWriter
        {

            int count = value.Count;
            int vectorOffset = context.AllocateVector(4, count, 12);
            spanWriter.WriteUOffset(span, offset, vectorOffset);
            spanWriter.WriteInt(span, count, vectorOffset);
            vectorOffset += sizeof(int);


            if (value is global::FlatSharpEndToEndTests.ToStringMethods.Vec3[] array)
            {

                int i;
                for (i = 0; i < array.Length; i = unchecked(i + 1))
                {
                    var current = array[i];


                    global::FlatSharp.Compiler.Generated.ND3FAA03648C03A18D528EE1013A444407DC0CB9DB99EF59147FFFCB26C3E4502.Helpers.Serialize(spanWriter, span, current, vectorOffset);
                    vectorOffset += 12;
                }
            }
            else if (value is List<global::FlatSharpEndToEndTests.ToStringMethods.Vec3> realList)
            {

                int i;
                for (i = 0; i < realList.Count; i = unchecked(i + 1))
                {
                    var current = realList[i];


                    global::FlatSharp.Compiler.Generated.ND3FAA03648C03A18D528EE1013A444407DC0CB9DB99EF59147FFFCB26C3E4502.Helpers.Serialize(spanWriter, span, current, vectorOffset);
                    vectorOffset += 12;
                }
            }
            else
            {

                int i;
                for (i = 0; i < count; i = unchecked(i + 1))
                {
                    var current = value[i];


                    global::FlatSharp.Compiler.Generated.ND3FAA03648C03A18D528EE1013A444407DC0CB9DB99EF59147FFFCB26C3E4502.Helpers.Serialize(spanWriter, span, current, vectorOffset);
                    vectorOffset += 12;
                }
            }
        }



        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::System.Collections.Generic.IList<FlatSharpEndToEndTests.ToStringMethods.Vec3> Parse_Lazy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
        {

            return GeneratedVector_71e0ceaec3ed69aec5600b7eb5e417d4_Lazy<TInputBuffer>.GetOrCreate(
                buffer,
                offset + buffer.ReadUOffset(offset),
                remainingDepth,
                fieldContext);
        }
        [System.Diagnostics.DebuggerDisplay("Lazy [ Vec3 ], Count = {Count}")]
        internal sealed class GeneratedVector_71e0ceaec3ed69aec5600b7eb5e417d4_Lazy<TInputBuffer>
            : object
            , IList<global::FlatSharpEndToEndTests.ToStringMethods.Vec3>
            , IReadOnlyList<global::FlatSharpEndToEndTests.ToStringMethods.Vec3>
            , IFlatBufferDeserializedVector
            , IPoolableObject
            where TInputBuffer : IInputBuffer
        {
            private int offset;
            private int count;
            private TInputBuffer buffer;
            private TableFieldContext fieldContext;
            private short remainingDepth;

            private int inUse = 1;

#pragma warning disable CS8618
            private GeneratedVector_71e0ceaec3ed69aec5600b7eb5e417d4_Lazy() { }
#pragma warning restore CS8618

            public static GeneratedVector_71e0ceaec3ed69aec5600b7eb5e417d4_Lazy<TInputBuffer> GetOrCreate(
                TInputBuffer memory,
                int offset,
                short remainingDepth,
                TableFieldContext fieldContext)
            {
                if (!ObjectPool.TryGet<GeneratedVector_71e0ceaec3ed69aec5600b7eb5e417d4_Lazy<TInputBuffer>>(out var item))
                {
                    item = new GeneratedVector_71e0ceaec3ed69aec5600b7eb5e417d4_Lazy<TInputBuffer>();
                }

                item.count = (int)memory.ReadUInt(offset);
                item.offset = offset + sizeof(uint);
                item.buffer = memory;
                item.fieldContext = fieldContext;
                item.remainingDepth = remainingDepth;

                item.inUse = 1;

                return item;
            }

            public global::FlatSharpEndToEndTests.ToStringMethods.Vec3 this[int index]
            {
                get => this.SafeParseItem(index);
                set
                {
                    VectorUtilities.CheckIndex(index, this.count);
                    this.UnsafeWriteThrough(index, value);
                }
            }

            public int Count => this.count;

            public FlatBufferDeserializationOption DeserializationOption => FlatBufferDeserializationOption.Lazy;


            public void ReturnToPool(bool force = false)
            {
                if (this.DeserializationOption.ShouldReturnToPool(force))
                {
                    if (System.Threading.Interlocked.Exchange(ref inUse, 0) == 1)
                    {
                        this.count = -1;
                        this.offset = -1;

                        this.buffer = default(TInputBuffer)!;
                        this.fieldContext = null!;
                        this.remainingDepth = -1;

                        ObjectPool.Return(this);
                    }
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private global::FlatSharpEndToEndTests.ToStringMethods.Vec3 SafeParseItem(int index)
            {
                VectorUtilities.CheckIndex(index, this.count);
                return this.UnsafeParseItem(index);
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private global::FlatSharpEndToEndTests.ToStringMethods.Vec3 UnsafeParseItem(int index)
            {
                int offset = this.offset + (checked(12 * index));
                return global::FlatSharp.Compiler.Generated.ND3FAA03648C03A18D528EE1013A444407DC0CB9DB99EF59147FFFCB26C3E4502.Helpers.Parse(buffer, offset, remainingDepth);
            }


            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private void UnsafeWriteThrough(int index, global::FlatSharpEndToEndTests.ToStringMethods.Vec3 value)
            {
                global::FlatSharp.Internal.FSThrow.NotMutable_DeserializedVector();
            }
            public bool Contains(global::FlatSharpEndToEndTests.ToStringMethods.Vec3 item)
        => global::FlatSharp.Internal.VectorsCommon.Contains(this, item);

            public int IndexOf(global::FlatSharpEndToEndTests.ToStringMethods.Vec3 item)
                => global::FlatSharp.Internal.VectorsCommon.IndexOf(this, item);

            public void CopyTo(global::FlatSharpEndToEndTests.ToStringMethods.Vec3[]? array, int arrayIndex)
                => global::FlatSharp.Internal.VectorsCommon.CopyTo(this, array, arrayIndex);

            public IEnumerator<global::FlatSharpEndToEndTests.ToStringMethods.Vec3> GetEnumerator()
                => global::FlatSharp.Internal.VectorsCommon.GetEnumerator(this);

            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => this.GetEnumerator();
            public bool IsReadOnly => true;

            public void Add(global::FlatSharpEndToEndTests.ToStringMethods.Vec3 item) => global::FlatSharp.Internal.FSThrow.NotMutable_DeserializedVector();
            public void Clear() => global::FlatSharp.Internal.FSThrow.NotMutable_DeserializedVector();
            public void Insert(int index, global::FlatSharpEndToEndTests.ToStringMethods.Vec3 item) => global::FlatSharp.Internal.FSThrow.NotMutable_DeserializedVector();
            public void RemoveAt(int index) => global::FlatSharp.Internal.FSThrow.NotMutable_DeserializedVector();
            public bool Remove(global::FlatSharpEndToEndTests.ToStringMethods.Vec3 item) => global::FlatSharp.Internal.FSThrow.NotMutable_DeserializedVector();
            IInputBuffer IFlatBufferDeserializedVector.InputBuffer => this.buffer;

            int IFlatBufferDeserializedVector.ItemSize => 12;

            int IFlatBufferDeserializedVector.OffsetBase => this.offset;

            object IFlatBufferDeserializedVector.ItemAt(int index) => this.SafeParseItem(index)!;

            int IFlatBufferDeserializedVector.OffsetOf(int index)
            {
                VectorUtilities.CheckIndex(index, this.Count);
                return this.offset + (checked(12 * index));
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::System.Collections.Generic.IList<FlatSharpEndToEndTests.ToStringMethods.Vec3> Parse_Progressive<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
        {

            return GeneratedVector_71e0ceaec3ed69aec5600b7eb5e417d4_Progressive<TInputBuffer>.GetOrCreate(
                buffer,
                offset + buffer.ReadUOffset(offset),
                remainingDepth,
                fieldContext);
        }
        [System.Diagnostics.DebuggerDisplay("Progressive [ Vec3 ], Count = {Count}")]
        internal sealed class GeneratedVector_71e0ceaec3ed69aec5600b7eb5e417d4_Progressive<TInputBuffer>
            : object
            , IList<global::FlatSharpEndToEndTests.ToStringMethods.Vec3>
            , IReadOnlyList<global::FlatSharpEndToEndTests.ToStringMethods.Vec3>
            , IFlatBufferDeserializedVector
            , IPoolableObject
            where TInputBuffer : IInputBuffer
        {
            private const uint ChunkSize = 32;

            private int offset;
            private int count;
            private TInputBuffer buffer;
            private TableFieldContext fieldContext;
            private short remainingDepth;
            private global::FlatSharpEndToEndTests.ToStringMethods.Vec3[]?[] items;
            private int inUse = 1;

#pragma warning disable CS8618
            private GeneratedVector_71e0ceaec3ed69aec5600b7eb5e417d4_Progressive() { }
#pragma warning restore CS8618

            public static GeneratedVector_71e0ceaec3ed69aec5600b7eb5e417d4_Progressive<TInputBuffer> GetOrCreate(
                TInputBuffer memory,
                int offset,
                short remainingDepth,
                TableFieldContext fieldContext)
            {
                if (!ObjectPool.TryGet<GeneratedVector_71e0ceaec3ed69aec5600b7eb5e417d4_Progressive<TInputBuffer>>(out var item))
                {
                    item = new GeneratedVector_71e0ceaec3ed69aec5600b7eb5e417d4_Progressive<TInputBuffer>();
                }

                item.count = (int)memory.ReadUInt(offset);
                item.offset = offset + sizeof(uint);
                item.buffer = memory;
                item.fieldContext = fieldContext;
                item.remainingDepth = remainingDepth;


                int progressiveMinLength = (int)(item.count / ChunkSize) + 1;
                item.items = System.Buffers.ArrayPool<global::FlatSharpEndToEndTests.ToStringMethods.Vec3[]?>.Shared.Rent(progressiveMinLength);
                item.inUse = 1;

                return item;
            }

            public global::FlatSharpEndToEndTests.ToStringMethods.Vec3 this[int index]
            {
                get => this.ProgressiveGet(index);
                set => this.ProgressiveSet(index, value);
            }

            public int Count => this.count;

            public FlatBufferDeserializationOption DeserializationOption => FlatBufferDeserializationOption.Progressive;


            public void ReturnToPool(bool force = false)
            {
                if (this.DeserializationOption.ShouldReturnToPool(force))
                {
                    if (System.Threading.Interlocked.Exchange(ref inUse, 0) == 1)
                    {
                        this.count = -1;
                        this.offset = -1;

                        this.buffer = default(TInputBuffer)!;
                        this.fieldContext = null!;
                        this.remainingDepth = -1;

                        var items = this.items;
                        this.items = null!;

                        if (items is null)
                        {
                            return;
                        }

                        for (int i = 0; i < items.Length; ++i)
                        {
                            var block = items[i];

                            if (block is null)
                            {
                                continue;
                            }



                            System.Buffers.ArrayPool<global::FlatSharpEndToEndTests.ToStringMethods.Vec3>.Shared.Return(block, true);
                            items[i] = null;
                        }

                        System.Buffers.ArrayPool<global::FlatSharpEndToEndTests.ToStringMethods.Vec3[]?>.Shared.Return(items);
                        ObjectPool.Return(this);
                    }
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static void GetAddress(uint index, out uint rowIndex, out uint colIndex)
            {
                rowIndex = index / ChunkSize;
                colIndex = index % ChunkSize;
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private global::FlatSharpEndToEndTests.ToStringMethods.Vec3[] GetOrCreateRow(global::FlatSharpEndToEndTests.ToStringMethods.Vec3[]?[] items, uint rowIndex)
            {
                return items[rowIndex] ?? this.CreateRow(items, rowIndex);
            }

            [MethodImpl(MethodImplOptions.NoInlining)]
            private global::FlatSharpEndToEndTests.ToStringMethods.Vec3[] CreateRow(global::FlatSharpEndToEndTests.ToStringMethods.Vec3[]?[] items, uint rowIndex)
            {
                var row = System.Buffers.ArrayPool<global::FlatSharpEndToEndTests.ToStringMethods.Vec3>.Shared.Rent((int)ChunkSize);
                items[rowIndex] = row;

                unchecked
                {
                    int absoluteStartIndex = (int)(checked(rowIndex << 5));
                    int copyCount = 32;
                    int remainingItems = this.count - absoluteStartIndex;


                    if (remainingItems < 32)
                    {
                        copyCount = remainingItems;
                    }

                    int offset = this.offset + (checked(12 * absoluteStartIndex));
                    for (int i = 0; i < copyCount; ++i)
                    {
                        row[i] = this.UnsafeParseFromOffset(offset);
                        offset += 12;
                    }
                }

                return row;
            }

            private global::FlatSharpEndToEndTests.ToStringMethods.Vec3 ProgressiveGet(int index)
            {
                VectorUtilities.CheckIndex(index, this.count);

                uint uindex = unchecked((uint)index);
                GetAddress(uindex, out uint rowIndex, out uint colIndex);

                var items = this.items;
                var row = this.GetOrCreateRow(items, rowIndex);
                var item = row[colIndex];



                return item!;
            }

            private void ProgressiveSet(int index, global::FlatSharpEndToEndTests.ToStringMethods.Vec3 value) => this.InlineProgressiveSet(index, value);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private void InlineProgressiveSet(int index, global::FlatSharpEndToEndTests.ToStringMethods.Vec3 value)
            {
                VectorUtilities.CheckIndex(index, this.count);
                uint uindex = (uint)index;
                GetAddress(uindex, out uint rowIndex, out uint colIndex);
                var row = this.GetOrCreateRow(this.items, rowIndex);
                row[colIndex] = value;
                this.UnsafeWriteThrough(index, value);
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private global::FlatSharpEndToEndTests.ToStringMethods.Vec3 UnsafeParseItem(int index)
            {
                int offset = this.offset + (checked(12 * index));
                return UnsafeParseFromOffset(offset);
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private global::FlatSharpEndToEndTests.ToStringMethods.Vec3 UnsafeParseFromOffset(int offset)
            {
                return global::FlatSharp.Compiler.Generated.ND3FAA03648C03A18D528EE1013A444407DC0CB9DB99EF59147FFFCB26C3E4502.Helpers.Parse(buffer, offset, remainingDepth);
            }


            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private void UnsafeWriteThrough(int index, global::FlatSharpEndToEndTests.ToStringMethods.Vec3 value)
            {
                global::FlatSharp.Internal.FSThrow.NotMutable_DeserializedVector();
            }
            public bool Contains(global::FlatSharpEndToEndTests.ToStringMethods.Vec3 item)
        => global::FlatSharp.Internal.VectorsCommon.Contains(this, item);

            public int IndexOf(global::FlatSharpEndToEndTests.ToStringMethods.Vec3 item)
                => global::FlatSharp.Internal.VectorsCommon.IndexOf(this, item);

            public void CopyTo(global::FlatSharpEndToEndTests.ToStringMethods.Vec3[]? array, int arrayIndex)
                => global::FlatSharp.Internal.VectorsCommon.CopyTo(this, array, arrayIndex);

            public IEnumerator<global::FlatSharpEndToEndTests.ToStringMethods.Vec3> GetEnumerator()
                => global::FlatSharp.Internal.VectorsCommon.GetEnumerator(this);

            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => this.GetEnumerator();
            public bool IsReadOnly => true;

            public void Add(global::FlatSharpEndToEndTests.ToStringMethods.Vec3 item) => global::FlatSharp.Internal.FSThrow.NotMutable_DeserializedVector();
            public void Clear() => global::FlatSharp.Internal.FSThrow.NotMutable_DeserializedVector();
            public void Insert(int index, global::FlatSharpEndToEndTests.ToStringMethods.Vec3 item) => global::FlatSharp.Internal.FSThrow.NotMutable_DeserializedVector();
            public void RemoveAt(int index) => global::FlatSharp.Internal.FSThrow.NotMutable_DeserializedVector();
            public bool Remove(global::FlatSharpEndToEndTests.ToStringMethods.Vec3 item) => global::FlatSharp.Internal.FSThrow.NotMutable_DeserializedVector();
            IInputBuffer IFlatBufferDeserializedVector.InputBuffer => this.buffer;

            int IFlatBufferDeserializedVector.ItemSize => 12;

            int IFlatBufferDeserializedVector.OffsetBase => this.offset;

            object IFlatBufferDeserializedVector.ItemAt(int index) => this.ProgressiveGet(index)!;

            int IFlatBufferDeserializedVector.OffsetOf(int index)
            {
                VectorUtilities.CheckIndex(index, this.Count);
                return this.offset + (checked(12 * index));
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::System.Collections.Generic.IList<FlatSharpEndToEndTests.ToStringMethods.Vec3> Parse_Greedy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
        {

            return GeneratedVector_71e0ceaec3ed69aec5600b7eb5e417d4_Greedy<TInputBuffer>.GetOrCreate(
                buffer,
                offset + buffer.ReadUOffset(offset),
                remainingDepth,
                fieldContext);
        }
        [System.Diagnostics.DebuggerDisplay("Greedy [ Vec3 ], Count = {Count}")]
        internal sealed class GeneratedVector_71e0ceaec3ed69aec5600b7eb5e417d4_Greedy<TInputBuffer>
            : object
            , IList<global::FlatSharpEndToEndTests.ToStringMethods.Vec3>
            , IReadOnlyList<global::FlatSharpEndToEndTests.ToStringMethods.Vec3>
            , IPoolableObject
            where TInputBuffer : IInputBuffer
        {
            private readonly List<global::FlatSharpEndToEndTests.ToStringMethods.Vec3> list;
            private int inUse = 1;

            private GeneratedVector_71e0ceaec3ed69aec5600b7eb5e417d4_Greedy(int count)
            {
                this.list = new List<global::FlatSharpEndToEndTests.ToStringMethods.Vec3>(count);
            }

            public static GeneratedVector_71e0ceaec3ed69aec5600b7eb5e417d4_Greedy<TInputBuffer> GetOrCreate(
                TInputBuffer buffer,
                int offset,
                short remainingDepth,
                TableFieldContext fieldContext)
            {
                int count = (int)buffer.ReadUInt(offset);
                offset += sizeof(int);

                if (ObjectPool.TryGet(out GeneratedVector_71e0ceaec3ed69aec5600b7eb5e417d4_Greedy<TInputBuffer>? list))

                {
#if NET6_0_OR_GREATER
                
                list.list.EnsureCapacity(count);
#endif
                }
                else
                {
                    list = new GeneratedVector_71e0ceaec3ed69aec5600b7eb5e417d4_Greedy<TInputBuffer>(count);
                }

                var innerList = list.list;
                for (int i = 0; i < count; ++i)
                {
                    var item = global::FlatSharp.Compiler.Generated.ND3FAA03648C03A18D528EE1013A444407DC0CB9DB99EF59147FFFCB26C3E4502.Helpers.Parse(buffer, offset, remainingDepth);
                    innerList.Add(item);
                    offset += 12;
                }

                list.inUse = 1;

                return list;
            }


            public void ReturnToPool(bool force)
            {
                if (force)
                {
                    if (System.Threading.Interlocked.Exchange(ref this.inUse, 0) != 0)
                    {


                        this.list.Clear();
                        ObjectPool.Return(this);
                    }
                }
            }

            public global::FlatSharpEndToEndTests.ToStringMethods.Vec3 this[int index]
            {
                get => this.GetItem(index);
                set => this.SetItem(index, value);
            }

            public int Count => this.list.Count;

            public FlatBufferDeserializationOption DeserializationOption => FlatBufferDeserializationOption.Greedy;

            private global::FlatSharpEndToEndTests.ToStringMethods.Vec3 GetItem(int index) => this.list[index];
            private void SetItem(int index, global::FlatSharpEndToEndTests.ToStringMethods.Vec3 value) => global::FlatSharp.Internal.FSThrow.NotMutable_DeserializedVector();

            public bool Contains(global::FlatSharpEndToEndTests.ToStringMethods.Vec3 item)
        => global::FlatSharp.Internal.VectorsCommon.Contains(this, item);

            public int IndexOf(global::FlatSharpEndToEndTests.ToStringMethods.Vec3 item)
                => global::FlatSharp.Internal.VectorsCommon.IndexOf(this, item);

            public void CopyTo(global::FlatSharpEndToEndTests.ToStringMethods.Vec3[]? array, int arrayIndex)
                => global::FlatSharp.Internal.VectorsCommon.CopyTo(this, array, arrayIndex);

            public IEnumerator<global::FlatSharpEndToEndTests.ToStringMethods.Vec3> GetEnumerator()
                => global::FlatSharp.Internal.VectorsCommon.GetEnumerator(this);

            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => this.GetEnumerator();
            public bool IsReadOnly => true;

            public void Add(global::FlatSharpEndToEndTests.ToStringMethods.Vec3 item) => global::FlatSharp.Internal.FSThrow.NotMutable_DeserializedVector();
            public void Clear() => global::FlatSharp.Internal.FSThrow.NotMutable_DeserializedVector();
            public void Insert(int index, global::FlatSharpEndToEndTests.ToStringMethods.Vec3 item) => global::FlatSharp.Internal.FSThrow.NotMutable_DeserializedVector();
            public void RemoveAt(int index) => global::FlatSharp.Internal.FSThrow.NotMutable_DeserializedVector();
            public bool Remove(global::FlatSharpEndToEndTests.ToStringMethods.Vec3 item) => global::FlatSharp.Internal.FSThrow.NotMutable_DeserializedVector();
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::System.Collections.Generic.IList<FlatSharpEndToEndTests.ToStringMethods.Vec3> Parse_GreedyMutable<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
        {

            return GeneratedVector_71e0ceaec3ed69aec5600b7eb5e417d4_GreedyMutable<TInputBuffer>.GetOrCreate(
                buffer,
                offset + buffer.ReadUOffset(offset),
                remainingDepth,
                fieldContext);
        }
        [System.Diagnostics.DebuggerDisplay("GreedyMutable [ Vec3 ], Count = {Count}")]
        internal sealed class GeneratedVector_71e0ceaec3ed69aec5600b7eb5e417d4_GreedyMutable<TInputBuffer>
            : object
            , IList<global::FlatSharpEndToEndTests.ToStringMethods.Vec3>
            , IReadOnlyList<global::FlatSharpEndToEndTests.ToStringMethods.Vec3>
            , IPoolableObject
            where TInputBuffer : IInputBuffer
        {
            private TableFieldContext fieldContext;
            private readonly List<global::FlatSharpEndToEndTests.ToStringMethods.Vec3> list;
            private int inUse = 1;

#pragma warning disable CS8618
            private GeneratedVector_71e0ceaec3ed69aec5600b7eb5e417d4_GreedyMutable(int count)
            {
                this.list = new List<global::FlatSharpEndToEndTests.ToStringMethods.Vec3>(count);
            }
#pragma warning restore CS8618

            public static GeneratedVector_71e0ceaec3ed69aec5600b7eb5e417d4_GreedyMutable<TInputBuffer> GetOrCreate(
                TInputBuffer buffer,
                int offset,
                short remainingDepth,
                TableFieldContext fieldContext)
            {
                int count = (int)buffer.ReadUInt(offset);
                offset += sizeof(int);

                if (ObjectPool.TryGet(out GeneratedVector_71e0ceaec3ed69aec5600b7eb5e417d4_GreedyMutable<TInputBuffer>? list))

                {
#if NET6_0_OR_GREATER
                
                list.list.EnsureCapacity(count);
#endif
                }
                else
                {
                    list = new GeneratedVector_71e0ceaec3ed69aec5600b7eb5e417d4_GreedyMutable<TInputBuffer>(count);
                }

                var innerList = list.list;
                for (int i = 0; i < count; ++i)
                {
                    var item = global::FlatSharp.Compiler.Generated.ND3FAA03648C03A18D528EE1013A444407DC0CB9DB99EF59147FFFCB26C3E4502.Helpers.Parse(buffer, offset, remainingDepth);
                    innerList.Add(item);
                    offset += 12;
                }

                list.fieldContext = fieldContext;
                list.inUse = 1;

                return list;
            }


            public void ReturnToPool(bool force)
            {
                if (force)
                {
                    if (System.Threading.Interlocked.Exchange(ref this.inUse, 0) != 0)
                    {


                        this.list.Clear();
                        ObjectPool.Return(this);
                    }
                }
            }

            public global::FlatSharpEndToEndTests.ToStringMethods.Vec3 this[int index]
            {
                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                get => this.GetItem(index);

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                set => this.SetItem(index, value);
            }

            public int Count => this.list.Count;

            public bool IsReadOnly => false;

            public FlatBufferDeserializationOption DeserializationOption => FlatBufferDeserializationOption.GreedyMutable;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private global::FlatSharpEndToEndTests.ToStringMethods.Vec3 GetItem(int index) => this.list[index];

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private void SetItem(int index, global::FlatSharpEndToEndTests.ToStringMethods.Vec3 value)
            {
                this.list[index] = value;
            }

            public void Add(global::FlatSharpEndToEndTests.ToStringMethods.Vec3 item)
            {
                this.list.Add(item);
            }

            public void Clear()
            {
                this.list.Clear();
            }

            public void Insert(int index, global::FlatSharpEndToEndTests.ToStringMethods.Vec3 item)
            {
                this.list.Insert(index, item);
            }

            public void RemoveAt(int index)
            {
                this.list.RemoveAt(index);
            }

            public bool Remove(global::FlatSharpEndToEndTests.ToStringMethods.Vec3 item)
            {
                return this.list.Remove(item);
            }

            public bool Contains(global::FlatSharpEndToEndTests.ToStringMethods.Vec3 item)
        => global::FlatSharp.Internal.VectorsCommon.Contains(this, item);

            public int IndexOf(global::FlatSharpEndToEndTests.ToStringMethods.Vec3 item)
                => global::FlatSharp.Internal.VectorsCommon.IndexOf(this, item);

            public void CopyTo(global::FlatSharpEndToEndTests.ToStringMethods.Vec3[]? array, int arrayIndex)
                => global::FlatSharp.Internal.VectorsCommon.CopyTo(this, array, arrayIndex);

            public IEnumerator<global::FlatSharpEndToEndTests.ToStringMethods.Vec3> GetEnumerator()
                => global::FlatSharp.Internal.VectorsCommon.GetEnumerator(this);

            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => this.GetEnumerator();
        }

    }
}




namespace FlatSharp.Compiler.Generated.N69778B0A505EF22DDC87C3C5ACB43FEC37AE9060433697AE39F2F466540F7A19
{
    // Make sure we can reference the namespace of the type we are using.
    // Ensures that extension methods, etc are available.
    using System;

    internal static class Helpers
    {

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static int GetMaxSize(global::System.Double value)
        {
            return 15;
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static void Serialize<TSpanWriter>(
            TSpanWriter spanWriter,
            Span<byte> span,
            global::System.Double value,
            int offset

            ) where TSpanWriter : ISpanWriter
        {
            spanWriter.WriteDouble(span, value, offset);
        }



        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static double Parse<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {

            return buffer.ReadDouble(offset);
        }


    }
}




namespace FlatSharp.Compiler.Generated.ND3FAA03648C03A18D528EE1013A444407DC0CB9DB99EF59147FFFCB26C3E4502
{
    // Make sure we can reference the namespace of the type we are using.
    // Ensures that extension methods, etc are available.
    using FlatSharpEndToEndTests.ToStringMethods;

    internal static class Helpers
    {


        internal static int GetMaxSize(global::FlatSharpEndToEndTests.ToStringMethods.Vec3 value)
        {
            return 15;
        }



        internal static void Serialize<TSpanWriter>(
            TSpanWriter spanWriter,
            Span<byte> span,
            global::FlatSharpEndToEndTests.ToStringMethods.Vec3 value,
            int offset

            ) where TSpanWriter : ISpanWriter
        {

            Span<byte> sizedSpan = span.Slice(offset, 12);
            global::FlatSharp.Compiler.Generated.NCFA4E1D328DE890B0729499CC6DFD44622EA2719E2FA0454F61F6686B802FB45.Helpers.Serialize(spanWriter, sizedSpan, value.X, 0);
            global::FlatSharp.Compiler.Generated.NCFA4E1D328DE890B0729499CC6DFD44622EA2719E2FA0454F61F6686B802FB45.Helpers.Serialize(spanWriter, sizedSpan, value.Y, 4);
            global::FlatSharp.Compiler.Generated.NCFA4E1D328DE890B0729499CC6DFD44622EA2719E2FA0454F61F6686B802FB45.Helpers.Serialize(spanWriter, sizedSpan, value.Z, 8);
        }




        internal static global::FlatSharpEndToEndTests.ToStringMethods.Vec3 Parse<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {


            var item = default(global::FlatSharpEndToEndTests.ToStringMethods.Vec3);

            item.X = global::FlatSharp.Compiler.Generated.NCFA4E1D328DE890B0729499CC6DFD44622EA2719E2FA0454F61F6686B802FB45.Helpers.Parse<TInputBuffer>(
                buffer,
                offset,
                remainingDepth);

            item.Y = global::FlatSharp.Compiler.Generated.NCFA4E1D328DE890B0729499CC6DFD44622EA2719E2FA0454F61F6686B802FB45.Helpers.Parse<TInputBuffer>(
                buffer,
                offset + 4,
                remainingDepth);

            item.Z = global::FlatSharp.Compiler.Generated.NCFA4E1D328DE890B0729499CC6DFD44622EA2719E2FA0454F61F6686B802FB45.Helpers.Parse<TInputBuffer>(
                buffer,
                offset + 8,
                remainingDepth);
            return item;

        }


    }
}




namespace FlatSharp.Compiler.Generated.N331F001CF321CF11BC240659FDA5763A47292410D345E51BA8E5F3343A16B6FB
{
    // Make sure we can reference the namespace of the type we are using.
    // Ensures that extension methods, etc are available.
    using System;

    internal static class Helpers
    {


        internal static int GetMaxSize(global::System.Memory<System.Byte> value)
        {
            return 7 + (checked(1 * value.Length));
        }



        internal static void Serialize<TSpanWriter>(
            TSpanWriter spanWriter,
            Span<byte> span,
            global::System.Memory<System.Byte> value,
            int offset
            , SerializationContext context
            ) where TSpanWriter : ISpanWriter
        {
            spanWriter.WriteReadOnlyByteMemoryBlock(span, value, offset, context);
        }




        internal static global::System.Memory<System.Byte> Parse_Lazy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
        {

            return buffer.ReadByteMemoryBlock(offset);
        }



        internal static global::System.Memory<System.Byte> Parse_Progressive<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
        {

            return buffer.ReadByteMemoryBlock(offset);
        }



        internal static global::System.Memory<System.Byte> Parse_Greedy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
        {

            return buffer.ReadByteMemoryBlock(offset).ToArray().AsMemory();
        }



        internal static global::System.Memory<System.Byte> Parse_GreedyMutable<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
        {

            return buffer.ReadByteMemoryBlock(offset).ToArray().AsMemory();
        }


    }
}




namespace FlatSharp.Compiler.Generated.NCFA4E1D328DE890B0729499CC6DFD44622EA2719E2FA0454F61F6686B802FB45
{
    // Make sure we can reference the namespace of the type we are using.
    // Ensures that extension methods, etc are available.
    using System;

    internal static class Helpers
    {

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static int GetMaxSize(global::System.Single value)
        {
            return 7;
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static void Serialize<TSpanWriter>(
            TSpanWriter spanWriter,
            Span<byte> span,
            global::System.Single value,
            int offset

            ) where TSpanWriter : ISpanWriter
        {
            spanWriter.WriteFloat(span, value, offset);
        }



        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static float Parse<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {

            return buffer.ReadFloat(offset);
        }


    }
}



namespace FlatSharpEndToEndTests.ToStringMethods
{
    [FlatBufferEnum(typeof(sbyte))]
    public enum Color : sbyte
    {
        Red = 0,
        Green = 1,
        Blue = 2,
    }

}

namespace FlatSharpEndToEndTests.ToStringMethods
{
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial struct Equipped : IFlatBufferUnion<FlatSharpEndToEndTests.ToStringMethods.Weapon, string>
    {
        public enum ItemKind : byte
        {
            Weapon = 1,
            Item = 2,
            NONE = 0,
        }


        private readonly object value;

        public ItemKind Kind => (ItemKind)this.Discriminator;

        public byte Discriminator { get; }
        public override string ToString() => $"Equipped {{ Weapon, Item }}";
        public Equipped(FlatSharpEndToEndTests.ToStringMethods.Weapon value)
        {
            if (value is null)
            {
                global::FlatSharp.Internal.FSThrow.ArgumentNull(nameof(value));
            }

            this.Discriminator = 1;
            this.value = value;
        }


        private FlatSharpEndToEndTests.ToStringMethods.Weapon UncheckedGetItem1()
        {
            return (FlatSharpEndToEndTests.ToStringMethods.Weapon)this.value;
        }


        public FlatSharpEndToEndTests.ToStringMethods.Weapon Weapon => this.Item1;

        public FlatSharpEndToEndTests.ToStringMethods.Weapon Item1
        {
            get
            {
                if (this.Discriminator != 1)
                {
                    global::FlatSharp.Internal.FSThrow.InvalidOperation_UnionIsNotOfType();
                }

                return this.UncheckedGetItem1();
            }

        }


        public bool TryGet(out FlatSharpEndToEndTests.ToStringMethods.Weapon? value)
        {
            if (this.Discriminator != 1)
            {
                value = default;
                return false;
            }

            value = this.UncheckedGetItem1();
            return true;
        }

        public Equipped(string value)
        {
            if (value is null)
            {
                global::FlatSharp.Internal.FSThrow.ArgumentNull(nameof(value));
            }

            this.Discriminator = 2;
            this.value = value;
        }


        private string UncheckedGetItem2()
        {
            return (string)this.value;
        }


        public string Item => this.Item2;

        public string Item2
        {
            get
            {
                if (this.Discriminator != 2)
                {
                    global::FlatSharp.Internal.FSThrow.InvalidOperation_UnionIsNotOfType();
                }

                return this.UncheckedGetItem2();
            }

        }


        public bool TryGet(out string? value)
        {
            if (this.Discriminator != 2)
            {
                value = default;
                return false;
            }

            value = this.UncheckedGetItem2();
            return true;
        }

        /// <summary>
        /// A convenience interface for implementing a visitor.
        /// </summary>
        public interface Visitor<TReturn> : IFlatBufferUnionVisitor<TReturn, FlatSharpEndToEndTests.ToStringMethods.Weapon, string> { }
        /// <summary>
        /// Accepts a visitor into this FlatBufferUnion. Use a value-type Visitor for maximum performance.
        /// </summary>
        public TReturn Accept<TVisitor, TReturn>(TVisitor visitor)
           where TVisitor : IFlatBufferUnionVisitor<TReturn, FlatSharpEndToEndTests.ToStringMethods.Weapon, string>
        {
            var disc = this.Discriminator;
            switch (disc)
            {
                case 1: return visitor.Visit(this.UncheckedGetItem1());
                case 2: return visitor.Visit(this.UncheckedGetItem2());
                default:
                    global::FlatSharp.Internal.FSThrow.InvalidOperation_InvalidUnionDiscriminator<Equipped>(disc);
                    return default(TReturn);
            }

        }

        /// <summary>
        /// Performs a match operation on this Union.
        /// For cases where performance is important, prefer the Accept method to this one.
        /// </summary>
        public TReturn Match<TReturn>(Func<FlatSharpEndToEndTests.ToStringMethods.Weapon, TReturn> caseWeapon, Func<string, TReturn> caseItem)
        {
            var disc = this.Discriminator;
            switch (disc)
            {
                case 1: return caseWeapon(this.UncheckedGetItem1());
                case 2: return caseItem(this.UncheckedGetItem2());
                default:
                    global::FlatSharp.Internal.FSThrow.InvalidOperation_InvalidUnionDiscriminator<Equipped>(disc);
                    return default(TReturn);
            }

        }

    }

}

namespace FlatSharpEndToEndTests.ToStringMethods
{
    [FlatBufferTable(BuildSerializer = true)]
    [FlatBufferMetadataAttribute(FlatBufferMetadataKind.FbsAttribute, "fs_serializer", "0")]
    [System.Runtime.CompilerServices.CompilerGenerated]
    [System.Diagnostics.DebuggerTypeProxy("FlatSharpEndToEndTests.ToStringMethods.Monster")]
    public partial class Monster
        : object
        , IFlatBufferSerializable<FlatSharpEndToEndTests.ToStringMethods.Monster>
        , IFlatBufferSerializable
    {
        static Monster()
        {
            OnStaticInitialize();
        }

#pragma warning disable CS8618
        public Monster()
        {
            this.Color = default!;
            this.Pos = default!;
            this.Mana = (short)(150);
            this.HP = (short)(100);
            this.Name = default!;
            this.Friendly = default!;
            this.Inventory = default!;
            this.Weapons = default!;
            this.Equipped = default!;
            this.Path = default!;
            this.ManaRegenRate = default!;
            this.SecondaryColor = default!;
            this.OnInitialized(null);
        }

#pragma warning restore CS8618
#pragma warning disable CS8618
        protected Monster(FlatBufferDeserializationContext context)
        {
        }

#pragma warning restore CS8618
#if NET7_0_OR_GREATER
        [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
        public Monster(Monster source)
        {
            this.Color = global::FlatSharp.Compiler.Generated.CloneHelpers_c7b9e5a6e14d44a9bf6da3d1c466ecc2.Clone(source.Color);
            this.Pos = global::FlatSharp.Compiler.Generated.CloneHelpers_c7b9e5a6e14d44a9bf6da3d1c466ecc2.Clone(source.Pos);
            this.Mana = global::FlatSharp.Compiler.Generated.CloneHelpers_c7b9e5a6e14d44a9bf6da3d1c466ecc2.Clone(source.Mana);
            this.HP = global::FlatSharp.Compiler.Generated.CloneHelpers_c7b9e5a6e14d44a9bf6da3d1c466ecc2.Clone(source.HP);
            this.Name = global::FlatSharp.Compiler.Generated.CloneHelpers_c7b9e5a6e14d44a9bf6da3d1c466ecc2.Clone(source.Name);
            this.Friendly = global::FlatSharp.Compiler.Generated.CloneHelpers_c7b9e5a6e14d44a9bf6da3d1c466ecc2.Clone(source.Friendly);
            this.Inventory = global::FlatSharp.Compiler.Generated.CloneHelpers_c7b9e5a6e14d44a9bf6da3d1c466ecc2.Clone(source.Inventory);
            this.Weapons = global::FlatSharp.Compiler.Generated.CloneHelpers_c7b9e5a6e14d44a9bf6da3d1c466ecc2.Clone(source.Weapons);
            this.Equipped = global::FlatSharp.Compiler.Generated.CloneHelpers_c7b9e5a6e14d44a9bf6da3d1c466ecc2.Clone(source.Equipped);
            this.Path = global::FlatSharp.Compiler.Generated.CloneHelpers_c7b9e5a6e14d44a9bf6da3d1c466ecc2.Clone(source.Path);
            this.ManaRegenRate = global::FlatSharp.Compiler.Generated.CloneHelpers_c7b9e5a6e14d44a9bf6da3d1c466ecc2.Clone(source.ManaRegenRate);
            this.SecondaryColor = global::FlatSharp.Compiler.Generated.CloneHelpers_c7b9e5a6e14d44a9bf6da3d1c466ecc2.Clone(source.SecondaryColor);
            this.OnInitialized(null);
        }

        static partial void OnStaticInitialize();
        partial void OnInitialized(FlatBufferDeserializationContext? context);
        protected void OnFlatSharpDeserialized(FlatBufferDeserializationContext context)
        {
            this.OnInitialized(context);
        }


        [FlatBufferItemAttribute(0)]
        public virtual FlatSharpEndToEndTests.ToStringMethods.Color Color { get; set; }

        [FlatBufferItemAttribute(1)]
        public virtual FlatSharpEndToEndTests.ToStringMethods.Vec3? Pos { get; set; }

        [FlatBufferItemAttribute(2, DefaultValue = (short)(150))]
        public virtual short Mana { get; set; }

        [FlatBufferItemAttribute(3, DefaultValue = (short)(100))]
        public virtual short HP { get; set; }

        [FlatBufferItemAttribute(4)]
        public virtual string? Name { get; set; }

        [FlatBufferItemAttribute(5, Deprecated = true)]
        [FlatBufferMetadataAttribute(FlatBufferMetadataKind.FbsAttribute, "deprecated", "0")]
        public virtual bool Friendly { get; set; }

        [FlatBufferItemAttribute(6)]
        [FlatBufferMetadataAttribute(FlatBufferMetadataKind.FbsAttribute, "fs_vector", "Memory")]
        public virtual Memory<byte>? Inventory { get; set; }

        [FlatBufferItemAttribute(7)]
        public virtual IList<FlatSharpEndToEndTests.ToStringMethods.Weapon>? Weapons { get; set; }

        [FlatBufferItemAttribute(8)]
        public virtual FlatSharpEndToEndTests.ToStringMethods.Equipped? Equipped { get; set; }

        [FlatBufferItemAttribute(10)]
        public virtual IList<FlatSharpEndToEndTests.ToStringMethods.Vec3>? Path { get; set; }

        [FlatBufferItemAttribute(11)]
        public virtual double ManaRegenRate { get; set; }

        [FlatBufferItemAttribute(12)]
        public virtual FlatSharpEndToEndTests.ToStringMethods.Color SecondaryColor { get; set; }
        public override string ToString() => $"Monster {{ Color = {this.Color}, Pos = {this.Pos}, Mana = {this.Mana}, HP = {this.HP}, Name = {this.Name}, Friendly = {this.Friendly}, Inventory = {this.Inventory}, Weapons = {this.Weapons}, Equipped = {this.Equipped}, Path = {this.Path}, ManaRegenRate = {this.ManaRegenRate}, SecondaryColor = {this.SecondaryColor} }}";
        public static ISerializer<FlatSharpEndToEndTests.ToStringMethods.Monster> Serializer { get; } = new global::FlatSharp.Compiler.Generated.NAF59E17467AA695D5717DF567DBB82D0F54CB812DC4C885E9EA262BDE2F754D4.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);

        ISerializer IFlatBufferSerializable.Serializer => (ISerializer)((IFlatBufferSerializable<FlatSharpEndToEndTests.ToStringMethods.Monster>)this).Serializer;
        ISerializer<FlatSharpEndToEndTests.ToStringMethods.Monster> IFlatBufferSerializable<FlatSharpEndToEndTests.ToStringMethods.Monster>.Serializer => Serializer;

#if NET7_0_OR_GREATER
        static ISerializer<FlatSharpEndToEndTests.ToStringMethods.Monster> IFlatBufferSerializable<FlatSharpEndToEndTests.ToStringMethods.Monster>.LazySerializer { get; } = new global::FlatSharp.Compiler.Generated.NAF59E17467AA695D5717DF567DBB82D0F54CB812DC4C885E9EA262BDE2F754D4.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.Lazy);
#endif
#if NET7_0_OR_GREATER
        static ISerializer<FlatSharpEndToEndTests.ToStringMethods.Monster> IFlatBufferSerializable<FlatSharpEndToEndTests.ToStringMethods.Monster>.GreedySerializer { get; } = new global::FlatSharp.Compiler.Generated.NAF59E17467AA695D5717DF567DBB82D0F54CB812DC4C885E9EA262BDE2F754D4.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.Greedy);
#endif
#if NET7_0_OR_GREATER
        static ISerializer<FlatSharpEndToEndTests.ToStringMethods.Monster> IFlatBufferSerializable<FlatSharpEndToEndTests.ToStringMethods.Monster>.GreedyMutableSerializer { get; } = new global::FlatSharp.Compiler.Generated.NAF59E17467AA695D5717DF567DBB82D0F54CB812DC4C885E9EA262BDE2F754D4.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);
#endif
#if NET7_0_OR_GREATER
        static ISerializer<FlatSharpEndToEndTests.ToStringMethods.Monster> IFlatBufferSerializable<FlatSharpEndToEndTests.ToStringMethods.Monster>.ProgressiveSerializer { get; } = new global::FlatSharp.Compiler.Generated.NAF59E17467AA695D5717DF567DBB82D0F54CB812DC4C885E9EA262BDE2F754D4.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.Progressive);
#endif
    }

}

namespace FlatSharpEndToEndTests.ToStringMethods
{
    [FlatBufferStruct()]
    [FlatBufferMetadataAttribute(FlatBufferMetadataKind.FbsAttribute, "fs_valueStruct", "0")]
    [System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Explicit, Size = 12)]
    public partial struct Vec3
    {
        [System.Runtime.InteropServices.FieldOffset(0)]
        [FlatBufferMetadataAttribute(FlatBufferMetadataKind.Accessor, "", "X")]
        public float X;

        [System.Runtime.InteropServices.FieldOffset(4)]
        [FlatBufferMetadataAttribute(FlatBufferMetadataKind.Accessor, "", "Y")]
        public float Y;

        [System.Runtime.InteropServices.FieldOffset(8)]
        [FlatBufferMetadataAttribute(FlatBufferMetadataKind.Accessor, "", "Z")]
        public float Z;

        public override string ToString() => $"Vec3 {{ X = {this.X}, Y = {this.Y}, Z = {this.Z} }}";
    }

}

namespace FlatSharpEndToEndTests.ToStringMethods
{
    [FlatBufferTable(BuildSerializer = false)]
    [System.Runtime.CompilerServices.CompilerGenerated]
    [System.Diagnostics.DebuggerTypeProxy("FlatSharpEndToEndTests.ToStringMethods.Weapon")]
    public partial class Weapon
        : object
    {
        static Weapon()
        {
            OnStaticInitialize();
        }

#pragma warning disable CS8618
        public Weapon()
        {
            this.Name = default!;
            this.Damage = default!;
            this.OnInitialized(null);
        }

#pragma warning restore CS8618
#pragma warning disable CS8618
        protected Weapon(FlatBufferDeserializationContext context)
        {
        }

#pragma warning restore CS8618
#if NET7_0_OR_GREATER
        [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
        public Weapon(Weapon source)
        {
            this.Name = global::FlatSharp.Compiler.Generated.CloneHelpers_c7b9e5a6e14d44a9bf6da3d1c466ecc2.Clone(source.Name);
            this.Damage = global::FlatSharp.Compiler.Generated.CloneHelpers_c7b9e5a6e14d44a9bf6da3d1c466ecc2.Clone(source.Damage);
            this.OnInitialized(null);
        }

        static partial void OnStaticInitialize();
        partial void OnInitialized(FlatBufferDeserializationContext? context);
        protected void OnFlatSharpDeserialized(FlatBufferDeserializationContext context)
        {
            this.OnInitialized(context);
        }


        [FlatBufferItemAttribute(0)]
        public virtual string? Name { get; set; }

        [FlatBufferItemAttribute(1)]
        public virtual short Damage { get; set; }
        public override string ToString() => $"Weapon {{ Name = {this.Name}, Damage = {this.Damage} }}";
    }

}

